**           Open Geospatial Consortium**

Submission Date: 2015-05-12

Approval Date:   <yyyy-dd-mm>

Publication Date: <yyyy-dd-mm>** **

External identifier of this OGC^?^ document:
<http://www.opengis.net/def/IS/sensorthings/1.0[http://www.opengis.net/def/IS/sensorthings/1.0]>

Internal reference number of this OGC^?^ document:    YY-nnnrx

Version: 0.9.1

Category: OpenGIS? Candidate Standard

Editor: Steve Liang (University of Calgary)

Co-Editors: Chih-Yuan Huang (National Central University)

Tania Khalafbeigi (University of Calgary)

 

 

*OGC? SensorThings API *

**Part 1: Sensing Profile**

 

 

Copyright ? 2015 Open Geospatial Consortium +
 To obtain additional rights of use, visit
http://www.opengeospatial.org/legal/[http://www.opengeospatial.org/legal/].****

 

*Warning*

This document is not an OGC Standard. This document is distributed for
review and comment. This document is subject to change without notice
and may not be referred to as an OGC Standard.

Recipients of this document are invited to submit, with their comments,
notification of any relevant patent rights of which they are aware and
to provide supporting documentation.

[width="100%",cols="100%",]
|================================================
a|
Document type:          OGC^?^ Candidate Standard

Document subtype:     if applicable

Document stage:         Draft

Document language:    English

|================================================

 +

License Agreement

Permission is hereby granted by the Open Geospatial Consortium,
("Licensor"), free of charge and subject to the terms set forth below,
to any person obtaining a copy of this Intellectual Property and any
associated documentation, to deal in the Intellectual Property without
restriction (except as set forth below), including without limitation
the rights to implement, use, copy, modify, merge, publish, distribute,
and/or sublicense copies of the Intellectual Property, and to permit
persons to whom the Intellectual Property is furnished to do so,
provided that all copyright notices on the intellectual property are
retained intact and that each person to whom the Intellectual Property
is furnished agrees to the terms of this Agreement.

If you modify the Intellectual Property, all copies of the modified
Intellectual Property must include, in addition to the above copyright
notice, a notice that the Intellectual Property includes modifications
that have not been approved or adopted by LICENSOR.

THIS LICENSE IS A COPYRIGHT LICENSE ONLY, AND DOES NOT CONVEY ANY RIGHTS
UNDER ANY PATENTS THAT MAY BE IN FORCE ANYWHERE IN THE WORLD.

THE INTELLECTUAL PROPERTY IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT
OF THIRD PARTY RIGHTS. THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
NOTICE DO NOT WARRANT THAT THE FUNCTIONS CONTAINED IN THE INTELLECTUAL
PROPERTY WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE
INTELLECTUAL PROPERTY WILL BE UNINTERRUPTED OR ERROR FREE. ANY USE OF
THE INTELLECTUAL PROPERTY SHALL BE MADE ENTIRELY AT THE USER?S OWN RISK.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY CONTRIBUTOR OF
INTELLECTUAL PROPERTY RIGHTS TO THE INTELLECTUAL PROPERTY BE LIABLE FOR
ANY CLAIM, OR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES, OR
ANY DAMAGES WHATSOEVER RESULTING FROM ANY ALLEGED INFRINGEMENT OR ANY
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR UNDER ANY OTHER LEGAL THEORY, ARISING OUT OF OR IN
CONNECTION WITH THE IMPLEMENTATION, USE, COMMERCIALIZATION OR
PERFORMANCE OF THIS INTELLECTUAL PROPERTY.

This license is effective until terminated. You may terminate it at any
time by destroying the Intellectual Property together with all copies in
any form. The license will also terminate if you fail to comply with any
term or condition of this Agreement. Except as provided in the following
sentence, no such termination of this license shall require the
termination of any third party end-user sublicense to the Intellectual
Property which is in force as of the date of notice of such termination.
In addition, should the Intellectual Property, or the operation of the
Intellectual Property, infringe, or in LICENSOR?s sole opinion be likely
to infringe, any patent, copyright, trademark or other right of a third
party, you agree that LICENSOR, in its sole discretion, may terminate
this license without any compensation or liability to you, your
licensees or any other party. You agree upon termination of any kind to
destroy or cause to be destroyed the Intellectual Property together with
all copies in any form, whether held by you or by any third party.

Except as contained in this notice, the name of LICENSOR or of any other
holder of a copyright in all or part of the Intellectual Property shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Intellectual Property without prior written
authorization of LICENSOR or such copyright holder. LICENSOR is and
shall at all times be the sole entity that may authorize you or any
third party to use certification marks, trademarks or other special
designations to indicate compliance with any LICENSOR standards or
specifications. This Agreement is governed by the laws of the
Commonwealth of Massachusetts. The application to this Agreement of the
United Nations Convention on Contracts for the International Sale of
Goods is hereby expressly excluded. In the event any provision of this
Agreement shall be deemed unenforceable, void or invalid, such provision
shall be modified so as to make it valid and enforceable, and as so
modified the entire Agreement shall remain in full force and effect. No
decision, action or inaction by LICENSOR shall be construed to be a
waiver of any rights or remedies available to it.

 

Contents

Contents.........................................................................................................................................
4

1.      
Scope..................................................................................................................................
12

2.      
Conformance........................................................................................................................
12

3.       Normative
references..............................................................................................................
14

4.       Terms and
definitions............................................................................................................
14

5.      
Conventions.........................................................................................................................
16

5.1      Presentation of Requirements and
Recommendations...................................................................
16

6.       Symbols (and abbreviated
terms)..............................................................................................
16

7.       SensorThings API
overview....................................................................................................
17

7.1      Who should use the OGC SensorThings
API.............................................................................
17

7.2      Benefits of the OGC SensorThings
API....................................................................................
17

7.3      Definition of
Things..............................................................................................................
18

8.       The SensorThings API Sensing Profile
Entities..........................................................................
18

8.1     
Overview.............................................................................................................................
18

8.2      Common
Properties...............................................................................................................
18

8.3      The Sensing Profile
Entities....................................................................................................
19

8.3.1   
Thing...........................................................................................................................
19

8.3.2   
Location.....................................................................................................................
20

8.3.3   
HistoricalLocation.................................................................................................
22

8.3.4   
Datastream.................................................................................................................
24

8.3.5   
Sensor.........................................................................................................................
27

8.3.6   
ObservedProperty.....................................................................................................
28

8.3.7   
Observation...............................................................................................................
29

8.3.8   
FeatureOfInterest...................................................................................................
31

9.       SensorThings Service
Interface.................................................................................................
32

9.1      URI
Components..................................................................................................................
32

9.2      Resource
Path.......................................................................................................................
33

9.2.1    Usage 1: no resource
path..................................................................................................
33

9.2.2    Usage 2: address to a collection of
entities............................................................................
34

9.2.3    Usage 3: address to an entity in a
collection..........................................................................
35

9.2.4    Usage 4: address to a property of an
entity............................................................................
36

9.2.5    Usage 5: address to the value of an entity?s
property...............................................................
36

9.2.6    Usage 6: address to a navigation property
(navigationLink).............................................. 37

9.2.7    Usage 7: address to an
associationLink........................................................................
37

9.2.8    Usage 8: nested resource
path.............................................................................................
38

9.3      Requesting
Data....................................................................................................................
38

9.3.1    Evaluating System Query
Options.......................................................................................
39

9.3.2    Specifying Properties to
Return..........................................................................................
39

9.3.2.1    
$expand.........................................................................................................
39

9.3.2.2    
$select.........................................................................................................
40

9.4      Query Entity
Sets..................................................................................................................
41

9.4.1   
$orderby.....................................................................................................................
41

9.4.2   
$top.............................................................................................................................
42

9.4.3   
$skip...........................................................................................................................
43

9.4.4   
$count.........................................................................................................................
43

9.4.5   
$filter.......................................................................................................................
44

9.4.5.1     Built-in filter
operations.......................................................................................
45

9.4.5.2     Built-in query
functions.......................................................................................
46

9.4.6    Server-Driven Paging
(nextLink).....................................................................................
48

10.     Sensing Profile
CRUD...........................................................................................................
49

10.1   
Overview.............................................................................................................................
49

10.2    Create an
entity.....................................................................................................................
50

10.2.1      
Request.....................................................................................................................
51

10.2.1.1        Link to existing entities when creating an
entity.................................................. 52

10.2.1.2        Create related entities when creating an
entity...................................................... 53

10.2.2      
Response...................................................................................................................
55

10.3    Read
entities........................................................................................................................
55

10.3.1      
Request.....................................................................................................................
55

10.3.2      
Response...................................................................................................................
55

10.4    Update an
entity....................................................................................................................
55

10.4.1      
Request.....................................................................................................................
55

10.4.2      
Response...................................................................................................................
56

10.5    Delete an
entity.....................................................................................................................
57

10.5.1      
Request.....................................................................................................................
57

11.     Batch
Requests.....................................................................................................................
58

11.1   
Introduction.........................................................................................................................
58

11.2    Batch-processing
request.........................................................................................................
58

11.2.1       Batch request body
example..........................................................................................
59

11.2.2       Referencing new entities in a change set
example...............................................................
60

11.3    Batch-processing
response.......................................................................................................
61

11.4    Asynchronous batch
requests...................................................................................................
62

12.     SensorThings MultiDatastream
extension...........................................................................
63

13.     SensorThings Data Array
Extension..........................................................................................
69

13.1    Retrieve a Datastream?s Observation entities in
dataArray.............................................................
69

13.1.1      
Request.....................................................................................................................
69

13.1.2      
Response...................................................................................................................
69

13.2    Create Observation entities with
dataArray......................................................................
72

13.2.1      
Request.....................................................................................................................
73

13.2.2      
Response...................................................................................................................
74

14.     SensorThings Sensing Profile MQTT
Extension.........................................................................
75

14.1    Create a SensorThings entity with MQTT
Publish......................................................................
75

14.1.1       Link to existing entities when creating an
entity................................................................
75

14.1.2       Create related entities when creating an entity (deep
insert).................................................. 75

14.2    Update a SensorThings entity with MQTT
Publish.....................................................................
76

14.3    Receive updates with MQTT
Subscribe.....................................................................................
76

14.3.1       Receive updates of a SensorThings entity set with MQTT
Subscribe................................ 76

14.3.2       Receive updates of a SensorThings entity?s property with
MQTT Subscribe...................... 76

14.3.3       Receive updates of the selected properties of the newly
created entities or updated entities of a SensorThings entity set with
MQTT
Subscribe...............................................................................................
77

Annex
A.......................................................................................................................................
78

 

 

**i. Abstract**

The OGC SensorThings API provides an open and unified way to
interconnect the Internet of Things devices, data, and applications over
the Web. At a high level the OGC SensorThings API provides two main
functionalities and each function is handled by a profile. The two
profiles are the Sensing Profile and the Tasking Profile. The Sensing
Profile provides a standard way to manage and retrieve observations and
metadata from heterogeneous IoT sensor systems. The Tasking Profile is
planned as a future work activity and will be defined in a separate
document as the part 2 of the SensorThings API.****

**ii. Keywords**

ogcdoc, ogc documents, iot, internet of things, sensor things, sensors,
swe****

**iii. Submitting organizations**

The following organizations submitted this document to the Open
Geospatial Consortium.

1.  University of Calgary
+
2.  National Central University
+
3.  Lockheed Martin****
+
4.  AIST
+
5.  FCU.GIS
+
6.  ITRI
+
7.  GeoConnections
+

**iv. Document contributor contact points**

All questions regarding this document should be directed to the editor
or the contributors:****

[width="100%",cols="50%,50%",]
|============================================
a|
*Contact*

 a|
**Company**

a|
Steve Liang

 a|
University of Calgary, Canada

a|
Alec Chih-Yuan Huang

 a|
National Central University, Taiwan

a|
Tania Khalafbeigi

 a|
University of Calgary, Canada

a|
Kyoungsook Kim

 a|
AIST

a|
Thomas Schwab

 a|
Lockheed Martin

a|
Jean Brodeur

 a|
NRCan/Canadian Geospatial Data Infrastructure

|============================================

 

*v. Revision history*

[width="100%",cols="20%,20%,20%,20%,20%",]
|=======================================================================
a|
*Date*

 a|
*Release*

 a|
*Editor*

 a|
*Primary clauses modified*

 a|
**Description**

a|
15/01/24

 a|
0.9.0

 a|
Steve Liang

 a|
Many.

 a|
Updated according to the Calgary and Tokyo TC SWG meeting. Changed
trajectory to HistoricalLocation.

a|
15/02/24

 a|
0.9

 a|
Carl Reed

 a|
Many.

 a|
Major edit and alignment with OGC document template.

a|
15/04/11

 a|
0.9

 a|
Steve Liang

 a|
Many.

 a|
Updated according to the Barcelona TC SWG meeting. Changed
ComplexDatastream to MultiDatastream.

a|
15/05/11

 a|
0.9.1

 a|
Steve Liang

 a|
Many.

 a|
Updated according to the OGC Architecture Board meeting on May 5^th^
2015. Added requirement classes.

|=======================================================================

 

**vi. Changes to the OpenGIS? Abstract Specification**

The OGC**^?^** Abstract Specification does not require changes to
accommodate this OGC**^?^** standard. **

*vii. Future work*

?       Finish SensorThings API - Tasking Profile

?       Explore potential harmonization with OASIS OData Protocol.

?       Support multiple data models and encodings for Location entity
type

 

 

**Foreword**

Attention is drawn to the possibility that some of the elements of this
document may be the subject of patent rights. The Open Geospatial
Consortium shall not be held responsible for identifying any or all such
patent rights.

Recipients of this document are requested to submit, with their
comments, notification of any relevant patent claims or other
intellectual property rights of which they may be aware that might be
infringed by any implementation of the standard set forth in this
document, and to provide supporting documentation.****

**

 

 

**

 

 

**

 

 

 

 

*Introduction*

The OGC SensorThings API provides an open and unified way to
interconnect the Internet of Things devices, data, and applications over
the Web. The OGC SensorThings API is an open standard, and that means it
is non-proprietary, platform-independent, and perpetual royalty-free.
Although it is a new standard, it builds on a rich set of proven-working
and widely-adopted open standards, such as the Web protocols and the OGC
Sensor Web Enablement (SWE) standards, including the ISO/OGC Observation
and Measurement data model [OGC and ISO 19156:2011]. That also means the
OGC SensorThings API is extensible and can be applied to not only simple
but also complex use cases.

At a high level the OGC SensorThings API provides two main
functionalities and each function is handled by a profile. The two
profiles are the Sensing Profile and the Tasking Profile. The Sensing
Profile provides a standard way to manage and retrieve observations and
metadata from heterogeneous IoT sensor systems. This document defined
the Sensing Profile as the part 1 of the SensorThings API. The Tasking
Profile provides a standard way for parameterizing - also called tasking
- of task-able IoT devices, such as sensors or actuators. The Tasking
Profile is planned as a future work activity and will be defined in a
separate document as the part 2 of the SensorThings API.

The Sensing Profile provides functions similar to the OGC Sensor
Observation Service (SOS) and the Tasking Profile will provide functions
similar to the OGC Sensor Planning Service (SPS). The main difference
between the SensorThings API and the OGC SOS and SPS is that the
SensorThings API is designed specifically for the resource-constrained
IoT devices and the Web developer community. As a result, the
SensorThings API follows the REST principles, the use of an efficient
JSON encoding, and the use of the flexible OASIS OData protocol and URL
conventions.

**

 

 

* +
 *
**

 

**OpenGIS ? SensorThings API**

 

1.     Scope
------------

The OGC SensorThings API provides an open standard-based framework to
interconnect the Internet of Things devices, data, and applications over
the Web.

2.    Conformance
-----------------

Conformance with this standard shall be checked using all the relevant
tests specified in Annex A (normative), Abstract Test Suite.

The following tables list the requirements classes defined by this
standard.

NOTE: The smaller blue text in the following tables is the path fragment
that appended to the following URI:
http://www.opengis.net/spec/sensorthings/1.0/, and it provides the URI
that can be used to unambiguously identify the requirement and the
conformance class.

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Requirements class id*

 a|
*Requirements*

 a|
*Description*

a|
req/readSensorThings

 a|
?       req/entities/commonProperties

?       req/entities/thingProperties

?       req/entities/locationProperties

?       req/entities/historicalLocationProperties

?       req/entities/datastreamProperties

?       req/entities/sensorProperties

?       req/entities/observedPropertyProperties

?       req/entities/featureOfInterestProperties

?       req/entities/thingRelations

?       req/entities/locationRelations

?       req/entities/historicalLocationRelations

?       req/entities/datastreamRelations

?       req/entities/sensorRelations

?       req/entities/observedRelations

?       req/entities/featureOfInterestRelations

 a|
A minimum READ-only SensorThings API service.

a|
req/readSensorThings/options

 a|
?       req/requestData/order

?       req/requestData/expand

?       req/requestData/select

?       req/queryOptions/responseCode

?       req/queryOptions/orderBy

?       req/queryOptions/top

?       req/queryOptions/skip

?       req/queryOptions/count

?       req/queryOptions/filter

?       req/queryOptions/builtInFilterOperations

?       req/queryOptions/builtInFilterFunctions

?       req/queryOptions/pagination

 

 a|
A READ-only SensorThings API service that supportings additional query
options and meets the optional conformance requirements.

a|
req/sensingCRUD

 a|
?       req/sensingCreate/entity

?       req/sensingCreate/links

?       req/sensingUpdate/entity

?       req/sensingDelete/entity

 a|
A SensorThings API service that supports sensing profile CRUD (i.e.,
Create, Read, Update, Delete).

a|
req/extension/batchRequest

 a|
?       req/extension/batchRequest

 

 a|
A SensorThings API service that supports the batch request extension.

a|
req/extension/multiDatastream

 a|
?       req/entities/multiDatastreamProperties

?       req/entities/multiDatastreamRelations

?       req/entities/multiDatastreamConstraints

 a|
A SensorThings API service that supports the MultiDatastream extension.

a|
req/extension/dataArray

 a|
?       req/extension/dataArray

 

 a|
A SensorThings API service that supports data array response format.

a|
req/extension/createUpdateMQTT

 a|
?       req/extension/createSensingMQTT

?       req/extension/updateSensingMQTT

 a|
A SensorThings API service that supports creating and updating entities
through MQTT.

a|
req/extension/receiveUpdateMQTT

 a|
?       req/extension/receiveUpdateMQTT

 

 a|
A SensorThings API service that supports receiving entities? updates
through MQTT.

|=======================================================================

 

 

 

 

3.    Normative references
--------------------------

The following normative documents contain provisions which, through
reference in this text, constitute provisions of this document. For
dated references, subsequent amendments to, or revisions of, any of
these publications do not apply. For undated references, the latest
edition of the normative document referred to applies.

[width="100%",cols="100%",]
|=======================================================================
a|
ISO 8601:1988(E), Data elements and interchange formats ? Information
interchange - Representation of dates and times.

a|
OGC and ISO 19156:2011(E), OGC Abstract Specification: Geographic
information ? Observations and Measurements

a|
OASIS OData Version 4.0 Part 1: Protocol Plus Errata 02

a|
OASIS OData Version 4.0 Part 2: URL Conventions Plus Errata 02

a|
OASIS OData JSON Format Version 4.0 Plus Errata 02

a|
OASIS OData ABNF Construction Rules Errata 02

a|
RFC 2616, Hypertext Transfer Protocol -- HTTP/1.1

a|
RFC 4627, the application/json Media Type for Javascript Object Notation
(JSON), July 2006

a|
Unified Code for Units of Measure (UCUM) ? Version 1.9, April 2015

|=======================================================================

4.    Terms and definitions
---------------------------

For the purposes of this document, the following terms and definitions
apply.****

*Collection*

Sets of Resources, which can be retrieved in whole or in part.
[http://tools.ietf.org/html/rfc5023#section-1[RFC5023]]****

*Entity*

Entities are instances of entity types. [OASIS OData Version 4.0 Part 1:
Protocol Plus Errata 02]____

__Note: Thing, Sensor, Datastream, Observation are some example entity
types of the OGC SensorThings API.__****

*Entity sets*

Entity sets are named collections of entities (e.g. Sensors is an entity
set containing Sensor entities). An entity's key uniquely identifies the
entity within an entity set. Entity sets provide entry points into an
OGC SensorThings API service. [OASIS OData Version 4.0 Part 1: Protocol
Plus Errata 02]****

*(Internet of) Thing*

A thing is an object of the physical world (physical things) or the
information world (virtual things) that is capable of being identified
and integrated into communication networks. [ITU-T Y.2060]****

*Measurement*

A set of operations having the object of determining the value of a
quantity [OGC and ISO 19156:2011]****

*Observation*

Act of measuring or otherwise determining the value of a property [OGC
and ISO 19156:2011]****

*Observation Result*

Estimate of the value of a property determined through a known
observation procedure [OGC and ISO 19156:2011]****

*Resources*

A network-accessible data object or service identified by an IRI, as
defined in [RFC 2616]****

*REST*

The Representational State Transfer (REST) style is an abstraction of
the architectural elements within a distributed hypermedia system. REST
focuses on the roles of components, the constraints upon their
interaction with other components, and their interpretation of
significant data elements. It encompasses the fundamental constraints
upon components, connectors, and data that define the basis of the Web
architecture, and thus the essence of its behavior as a network-based
application. An API that has REST architecture is called RESTful API. **

*Sensor*

An entity capable of observing a phenomenon and returning an observed
value. Type of observation procedure that provides the estimated value
of an observed property at its output. [OGC 12-000]

5.    Conventions
-----------------

5.1            Presentation of Requirements and Recommendations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Requirements are presented using the following style:

[width="100%",cols="100%",]
|========================================
a|
Req <number>           <requirement text>

<requirement id>

|========================================

**

 

<number> is a unique number within the document.

<requirement text> is the requirement itself. Normative verbs like SHALL
are written in capitals.

The smaller blue text at the bottom of the box <requirement id> is the
path fragment that appended to the following URI:
http://www.opengis.net/spec/sensorthings/1.0/req, and it provides the
URI of the requirement which can be used to unambiguously identify the
requirement.

Normative verbs like SHALL are written in capitals.

6.    Symbols (and abbreviated terms)
-------------------------------------

API                          Application Programming Interface

CS-W                       Catalog Service Web

CRUD                      Create, Read, Update, and Delete

GML                        Geography Markup Language

HTML                      HyperText Markup Language

HTTP                       Hypertext Transfer Protocol

IoT                           Internet of Things

ISO                          International Organization for
Standardization

JSON                       JavaScript Object Notation

OData                       the Open Data Protocol

OGC                        Open Geospatial Consortium

OWS                        OGC Web Services

O&M                       Observations and Measurements

REST                       REpresentational State Transfer

SensorML                 Sensor Model Language

SOS                         Sensor Observation Service

SPS                         Sensor Planning Service

SWE                        Sensor Web Enablement

UCUM                     Unified Code for Units of Measure

UML                        Unified Modeling Language

WoT                         Web of Things

XML                        eXtensible Markup Language

7.    SensorThings API overview
-------------------------------

7.1           Who should use the OGC SensorThings API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Organizations that need a web-based platforms to manage, store, share,
analyze IoT-based sensor data should use the OGC SensorThings API. The
OGC SensorThings API simplifies and accelerates the development of IoT
applications. Application developers can use this open standard to
connect to various IoT devices and create innovative applications
without worrying the daunting heterogeneous protocols of the different
IoT devices, gateways and services. IoT device. System manufacturers can
also use OGC SensorThings API as the API can be embedded within various
IoT hardware and software platforms, so that the various IoT devices can
effortlessly connect with the OGC standard-compliant servers around the
world. In summary, the OGC SensorThings API is transforming the numerous
disjointed IoT systems into a fully connected platform where complex
tasks can be synchronized and performed.

7.2           Benefits of the OGC SensorThings API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In today?s world, most IoT devices (e.g., sensors) have proprietary
software interfaces defined by their manufacturers and used selectively.
New APIs are often required and developed on an as needed basis, often
in an environment with resource limitations and associated risks. This
situation requires significant investment on the part of developers for
each new sensor or project involving multiple systems and on the part of
the providers of sensors, gateways and portals or services where
observations and measurements are required.

As a standardized data model and interface for sensors in the WoT and
IoTlink:#_ftn1[[1]], the OGC SensorThings API offers the following
benefits: (1) it permits the proliferation of new high value services
with lower overhead of development and wider reach, (2) it lowers the
risks, time and cost across a full IoT product cycle, and (3) it
simplifies the connections between devices-to-devices and
devices-to-applications.

7.3           Definition of Things
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With regard to the Internet of Things, a _thing_ is an object of the
physical world (physical things) or the information world (virtual
things) that is capable of being identified and integrated into
communication networks. [ITU-T Y.2060]

8.    The SensorThings API Sensing Profile Entities
---------------------------------------------------

8.1            Overview
~~~~~~~~~~~~~~~~~~~~~~~

The OGC SensorThings API data model consists of two parts: (1) the
Sensing Profile and (2) the Tasking Profile. The Sensing Profile allows
IoT devices and applications to CREATE, READ, UPDATE, and DELETE
(__i.e.__, HTTP POST, GET, PATCH, and DELETE) IoT data and metadata in a
SensorThings service.

Managing and retrieving observations and metadata from IoT sensor
systems is one of the most common use cases. As a result, the Sensing
Profile is designed based on the ISO/OGC Observation and Measurement
(O&M) model [OGC and ISO 19156:2011].

The key to the model is that an Observation is modeled as an act that
produces a result whose value is an estimate of a property of the
observation target or FeatureOfInterest. An Observation instance is
classified by its event time (e.g., resultTime and phenonmenonTime),
FeatureOfInterest, ObservedProperty, and the procedure used (often a
Sensor).

Moreover, Things are also modeled in the SensorThings API. Further the
geographical Locations of Things are useful in almost every application
and as a result are included as well.

In the Sensing Profile, a Thing has Locations and HistoricalLocations. A
Thing also can have multiple Datastreams. A Datastream is a collection
of Observations grouped by the same ObservedProperty and Sensor. An
Observation__ __is an event performed by a Sensor__ __that produces a
result whose value is an estimate of an ObservedProperty__ __of the
FeatureOfInterest.

                          

8.2           Common Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[width="100%",cols="100%",]
|=======================================================================
a|
Req 1           Each entity SHALL have the common properties listed in
Table _8_1.

entities/commonProperties

|=======================================================================

 

Table _8_1 Common properties

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**id**

 a|
id is the system-generated identifier of an entity. id is unique among
the entities of the same entity type in a SensorThings service.

 a|
Any

 a|
One (mandatory)

a|
**selfLink**

 a|
selfLink is the absolute URL of an entity that is unique among all other
entities.

 a|
URL

 a|
One (mandatory)

a|
**navigationLink**

 a|
navigationLink is the relative URL that retrieves content of related
entities.

 a|
Relative URL

 a|
One-to-many

(mandatory)

|=======================================================================

 

8.3           The Sensing Profile Entities
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Sensing Profile includes Thing, Location, HistoricalLocation,
Datastream, Sensor, ObservedProperty, Observation, and
FeatureOfInterest__ __entity types. In this section, we explain the
properties in each entity type and the direct relation to the other
entity types. In addition, for each entity type, we show an example of
the associated JSON encoding.

8.3.1      Thing
^^^^^^^^^^^^^^^^^

The OGC SensorThings API follows the ITU-T definition, __i.e.__, with
regard to the Internet of Things, a thing is an object of the physical
world (physical things) or the information world (virtual things) that
is capable of being identified and integrated into communication
networks [ITU-T Y.2060].

[width="100%",cols="100%",]
|=======================================================================
a|
Req 2           Each Thing entity SHALL have the mandatory properties
and MAY have the optional properties listed in Table _8_2.

entities/thingProperties

|=======================================================================

* *

Table _8_2 Properties of a Thing entity

[width="100%",cols="25%,25%,25%,25%",]
|=====================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**description**

 a|
This is a short description of the corresponding Thing entity.

 a|
CharacterString

 a|
One (mandatory)

a|
**properties**

 a|
A JSON Object containing user-annotated properties as key-value pairs.

 a|
JSON Object

 a|
Zero-to-one

|=====================================================================

 

[width="100%",cols="100%",]
|=======================================================================
a|
Req 3           Each Thing entity SHALL have the direct relation between
a Thing entity and other entity types listed in Table _8_3.

entities/thingRelations

|=======================================================================

**

 

Table _8_3 Direct relation between a Thing entity and other entity types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**Location**

 a|
Many optional to many optional

 a|
The Location entity locates the Thing. Multiple Things MAY be located at
the same Location. A Thing MAY not have a Location. A Thing SHOULD have
only one Location.

 

However, in some complex use cases, a Thing MAY have more than one
Location representations. In such case, the Thing MAY have more than one
Locations. These Locations SHALL have different encodingTypes and the
encodingTypes SHOULD be in different spaces (e.g., one encodingType in
Geometrical space and one encodingType in Topological space).

a|
**HistoricalLocation**

 a|
One mandatory to many optional

 a|
A Thing has zero-to-many HistoricalLocations. A HistoricalLocation has
one-and-only-one Thing

a|
**Datastream**link:#_msocom_1[[JBr1]] 

 a|
One mandatory to many optional

 a|
A Thing MAY have zero-to-many Datastreams.

|=======================================================================

 

Example 1 an example of a Thing entity:

[width="100%",cols="100%",]
|====================================================
a|
\{

  "id": 1,

  "selfLink": "http://example.org/v1.0/Things(1)",

  "Locations": \{

    "navigationLink": "Things(1)/Locations"

  },

  "Datastreams": \{

    "navigationLink": "Things(1)/Datastreams"

  },

  "HistoricalLocations": \{

    "navigationLink": "Things(1)/HistoricalLocations"

  },

  "description": "This thing is an oven.",

  "properties": \{

    "owner": "John Doe",

    "color": "Silver"

  }

}

|====================================================

 

8.3.2        Location
^^^^^^^^^^^^^^^^^^^^^^

The Location entity locates the Thing or the Things it associated with.
A Thing?s Location entity is defined as the last known location of the
Thing.

A Thing?s Location may be identical to the Thing?s Observations?
FeatureOfInterest. In the context of the IoT, the principle location of
interest is usually associated with the location of the Thing,
especially for _in-situ_ sensing applications. For example, the location
of interest of a wifi-connected thermostat should be the building or the
room in which the smart thermostat is located. And the FeatureOfInterest
of the Observations made by the thermostat (e.g., room temperature
readings) should also be the building or the room. link:#_msocom_2[[Carl
Reed2]] In this case, the content of the smart thermostat?s location
should be the same as the content of the temperature readings? feature
of interest.

However, the ultimate location of interest of a Thing is not always the
location of the Thing (e.g., in the case of remote sensing). In those
use cases, the content of a Thing?s Location is different from the
content of the __ FeatureOfInterest__ __of the Thing?s Observations.
Section 7.1.4 of [OGC and ISO 19156:2011] provides a detailed
explanation of observation location.

[width="100%",cols="100%",]
|=======================================================================
a|
Req 4           Each Location entity SHALL have the mandatory properties
and MAY have the optional properties listed in Table _8_4.

entities/locationProperties

|=======================================================================

* *

Table _8_4 Properties of a Location entity

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**description**link:#_msocom_3[[JBr3]] 

 a|
The description about the Location.

 a|
CharacterString

 a|
One (mandatory)

a|
**encodingType**

 a|
The encoding type of the location property. Its value is one of the
ValueCode enumeration (see Table _8_6).

 a|
ValueCode

 a|
One (mandatory)

a|
**location**

 a|
The location type is defined by encodingType.

 a|
Any (__i.e.__, the type is depending on the value of the encodingType)

 a|
One (mandatory)

|=======================================================================

 

[width="100%",cols="100%",]
|=======================================================================
a|
Req 5           Each Location entity SHALL have the direct relation
between a Location entity and other entity types listed in Table _8_5.

entities/locationRelations

|=======================================================================

* *

Table _8_5 Direct relation between a Location entity and other entity
types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**Thing**

 a|
Many optional to many optional

 a|
Multiple Things MAY locate at the same Location. A Thing MAY not have a
Location.

a|
**HistoricalLocation**

 a|
Many mandatory to many optional

 a|
A Location can have zero-to-many HistoricalLocations. One
HistoricalLocation SHALL have one or many Locations.

|=======================================================================

** **

Example 2 an example of a Location entity:

[width="100%",cols="100%",]
|=======================================================
a|
\{

  "id": 1,

  "selfLink": "http://example.org/v1.0/Locations(1)",

  "Things": \{

    "navigationLink": "Locations(1)/Things"

  },

  "HistoricalLocations": \{

    "navigationLink": "Locations(1)/HistoricalLocations"

  },

  "encodingType": "application/vnd.geo+json",

  "location": \{

    "type": "Point",

    "coordinates": [

      -114.06,

      51.05

    ]

  }

}

|=======================================================

 

Table _8_6 List of some code values used for identifying types for the
encodingType of the Location and FeatureOfInterest entity

[width="100%",cols="50%,50%",]
|=======================
a|
*Location encodingType*

 a|
*ValueCode Value *

a|
GeoJSON

 a|
application/vnd.geo+json

|=======================

 

8.3.3      HistoricalLocationlink:#_msocom_4[[Alec
Huan4]] link:#_msocom_5[[TK5]] 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A Thing?s HistoricalLocation entity set provides the current (__i.e.__,
last known) and previous locations of the Thing with their time. A new
HistoricalLocation SHALL be created automatically by the service when a
Thing has a new Location.link:#_msocom_6[[Alec Huan6]] 

[width="100%",cols="100%",]
|=======================================================================
a|
Req 6           Each HistoricalLocation entity SHALL have the mandatory
properties and MAY have the optional properties listed in Table _8_7.

entities/historicalLocationProperties

a|
Req 7           Each HistoricalLocation entity SHALL have the direct
relation between a Location entity and other entity types listed in
Table _8_8.

entities/historicalLocationRelations

a|
Req 8           When a Thing has a new Location, a new
HistoricalLocation SHALL be created and added to the Thing automatically
by the service.

entities/historicalLocationAutoCreation

|=======================================================================

 

The HistoricalLocation can also be created, updated and deleted. One use
case is to migrate historical observation data from an existing
observation data management system to a SensorThings API system.

The current Location of the Thing SHALL only be added to
HistoricalLocation automatically by the service, and SHALL not be
created as HistoricalLocation directly by user.

 

Table _8_7 Properties of a HistoricalLocation entity

[width="100%",cols="25%,25%,25%,25%",]
|================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**time**

 a|
The time when the Thing is known at the Location.

 a|
TM_Instant (ISO-8601 Time String)

 a|
One (mandatory)

|================================================

* *

Table _8_8 Direct relation between an HistoricalLocation entity and
other entity types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**Location**

 a|
Many optional to many mandatory

 a|
A Location can have zero-to-many HistoricalLocations. One
HistoricalLocation SHALL have one or many Locations.

a|
**Thing**

 a|
Many optional to one mandatory

 a|
A HistoricalLocation has one-and-only-one Thing. One Thing MAY have
zero-to-many HistoricalLocations.

|=======================================================================

** **

Example 3 An example of a HistoricalLocations entity set (e.g.,
Things(1)/HistoricalLocations):

[width="100%",cols="100%",]
|=======================================================================
a|
\{

  "value": [

    \{

      "id": 1,

      "selfLink": "http://example.org/v1.0/HistoricalLocations(1)",

      "Locations": \{

        "navigationLink": "HistoricalLocations(1)/Locations"

      },

      "Thing": \{

        "navigationLink": "HistoricalLocations(1)/Thing"

      },

      "time": "2015-01-25T12:00:00-07:00"

    },

    \{

      "id": 2,

      "selfLink": "http://example.org/v1.0/HistoricalLocations(2)",

      "Locations": \{

        "navigationLink": "HistoricalLocations(2)/Locations"

      },

      "Thing": \{

        "navigationLink": "HistoricalLocations(2)/Thing"

      },

      "time": "2015-01-25T13:00:00-07:00"

    }

  ],

 
"nextLink":"http://example.org/v1.0/Things(1)/HistoricalLocations?$skip=2&$top=2"

}

|=======================================================================

**

 

8.3.4       Datastream
^^^^^^^^^^^^^^^^^^^^^^^

A Datastream groups a collection of Observations and the Observations in
a Datastream SHALL measure the same ObservedProperty and are produced by
the same Sensor.

[width="100%",cols="100%",]
|=======================================================================
a|
Req 9           Each Datastream entity SHALL have the mandatory
properties and MAY have the optional properties listed in Table _8_9.

entities/datastreamProperties

a|
Req 10          Each Datastream entity SHALL have the direct relation
between a Datastream entity and other entity types listed in Table
_8_10.

entities/datastreamRelations

|=======================================================================

* *

Table _8_9 Properties of a Datastream entity

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**description**

 a|
The description of the Datastream entity.

 a|
CharacterString

 a|
One (mandatory)

a|
**unitOfMeasurement**link:#_msocom_7[[Carl Reed7]] 

 a|
link:#_msocom_8[[Steve Lia8]] A JSON Object containing three key-value
pairs. The name property presents the full name of the
unitOfMeasurement; the symbol property shows the textual form of the
unit symbol; and the definition contains the IRI defining the
unitOfMeasurement.

 

The values of these properties SHOULD follow the Unified Code for Unit
of Measure (UCUM).

 a|
JSON Object

 a|
One (mandatory)

 

Note: When a Datastream does not have a unit of measurement (e.g., a
OM_TruthObservation type), the corresponding unitOfMeasurement
properties SHALL have null values.

 

 

a|
**observationType**

 a|
The type of Observation (with unique result type), which is used by the
service to encode observations.

 a|
ValueCode

see Table 8-10.

 a|
One (mandatory)

a|
**observedArea**

 a|
The spatial bounding box of the spatial extent of all FeaturesOfInterest
that belong to the Observations associated with this Datastream.

 a|
link:#_msocom_9[[Steve Lia9]] GM_Envelope (GeoJSON Polygon)

 a|
Zero-to-one

a|
**phenomenonTime**

 a|
The temporal bounding box of the phenomenon times of all observations
belonging to this Datastream.

 a|
TM_Period (ISO 8601 Time Interval)

 a|
Zero-to-one

a|
**resultTime**

 a|
The temporal bounding box of the result times of all observations
belonging to this Datastream.

 a|
TM_Period (ISO 8601 Time Interval)

 a|
Zero-to-one

|=======================================================================

* *

Table _8_10 Direct relation between a Datastream entity and other entity
types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**Thing**

 a|
Many optional to one mandatory

 a|
A Thing has zero-to-many Datastreams. A Datastream entity SHALL only
link to a Thing as a collection of Observations.

a|
**Sensor**

 a|
Many optional to one mandatory

 a|
The Observations in a Datastream are performed by one-and-only-one
Sensor. One Sensor MAY produce zero-to-many Observations in different
Datastreams.

a|
**ObservedProperty**

 a|
Many optional to one mandatory

 a|
The Observations of a Datastream SHALL observe the same
ObservedProperty. The Observations of different Datastreams MAY observe
the same ObservedProperty.

a|
**Observation**

 a|
One mandatory to many optional

 a|
A Datastream has zero-to-many Observations. One Observation SHALL occur
in one-and-only-one Datastream.

|=======================================================================

** **

Example 4 A Datastream entity example:

[width="100%",cols="100%",]
|=======================================================================
a|
\{

  "id": 1,

  "selfLink": "http://example.org/v1.0/Datastreams(1)",

  "Thing": \{

    "navigationLink": "Datastreams(1)/Thing"

  },

  "Sensor": \{

    "navigationLink": "Datastreams(1)/Sensor"

  },

  "ObservedProperty": \{

    "navigationLink": "Datastreams(1)/ObservedProperty"

  },

  "Observations": \{

    "navigationLink": "Datastreams(1)/Observations"

  },

  "description": "This is a datastream measuring the temperature in an
oven.",

  "unitOfMeasurement":

    \{

      "name": "degree Celsius",

      "symbol": "?C",

      "definition": "http://unitsofmeasure.org/ucum.html#para-30"

    }

   ,

"observationType":
"http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement",

  "observedArea": \{

    "type": "Polygon",

    "coordinates": [

      [

        [100,0],[101,0],[101,1],[100,1],[100,0]

      ]

    ]

  },

  "phenomenonTime": "2014-03-01T13:00:00Z/2015-05-11T15:30:00Z",

  "resultTime": "2014-03-01T13:00:00Z/2015-05-11T15:30:00Z"

}

|=======================================================================

**

 

The observationType defines the result types for specialized
observations [OGC and ISO 19156:2011 Table 3]. The following table shows
some of the valueCodes that maps the UML classes in O&M v2.0 [OGC and
ISO 19156:2011] to observationType names and observation result types.

Table _8_11 List of some code values used for identifying types defined
in the O&M conceptual model (OGC and ISO 19156:2011)

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*O&M 2.0*

 a|
*Value Code Value (observationType names)*

 a|
**Content of result**

a|
OM_CategoryObservation

 a|
http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_CategoryObservation[http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_CategoryObservation]

 a|
IRI

a|
OM_CountObservation

 a|
http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_CountObservation[http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_CountObservation]

 a|
integer

a|
OM_Measurement

 a|
http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement[http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement]

 a|
double

a|
OM_Observation

 a|
http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Observation[http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Observation]

 a|
Any

a|
OM_TruthObservation

 a|
http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_TruthObservation[http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_TruthObservation]

 a|
boolean

|=======================================================================

**

 

8.3.5         Sensor
^^^^^^^^^^^^^^^^^^^^^

A Sensor is an instrument that observes a property or phenomenon with
the goal of producing an estimate of the value of the
propertylink:#_ftn2[[2]].

[width="100%",cols="100%",]
|=======================================================================
a|
Req 8           Each Sensor entity SHALL have the mandatory properties
and MAY have the optional properties listed in Table _8_12.

entities/sensorProperties

a|
Req 9           Each Sensor entity SHALL have the direct relation
between a Sensor entity and other entity types listed in Table _8_13.

entities/sensorRelations

|=======================================================================

**

 

Table _8_12 Properties of a Sensor entity

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**description**link:#_msocom_10[[JBr10]] 

 a|
The description of the Sensor entity.

 a|
CharacterString

 a|
One (mandatory)

a|
**encodingType**

 a|
The encoding type of the metadata property. Its value is one of the
ValueCode enumeration (see Table _8_14 for the available ValueCode).

 a|
ValueCode

 a|
One (mandatory)

a|
**metadata**

 a|
The detailed description of the Sensor or system. The metadata type is
defined by encodingType.

 a|
Any link:#_msocom_11[[JBr11]] (depending on the value of the
encodingType)

 a|
One (mandatory)

|=======================================================================

**

 

Table _8_13 Direct relation between a Sensor entity and other entity
types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**Datastream**

 a|
One mandatory to many optional

 a|
The Observations of a Datastream are measured with the same Sensor. One
Sensor MAY produce zero-to-many Observations in different Datastreams.

|=======================================================================

 

Table _8_14 List of some code values used for identifying types for the
encodingType of the Sensor entity

[width="100%",cols="50%,50%",]
|=========================================
a|
*Sensor encodingType*

 a|
*ValueCode Value *

a|
PDF

 a|
application/pdf

a|
SensorML****

 a|
http://www.opengis.net/doc/IS/SensorML/2.0

|=========================================

 

Example 5 An example of a Sensor entity:

[width="100%",cols="100%",]
|====================================================
a|
\{

  "id": 1,

  "selfLink": "http://example.org/v1.0/Sensors(1)",

  "Datastreams": \{

    "navigationLink": "Sensors(1)/Datastreams"

  },

  "description": "TMP36 - Analog Temperature sensor",

  "encodingType": "application/pdf",

  "metadata": "http://example.org/TMP35_36_37.pdf"

}

|====================================================

 

8.3.6         ObservedProperty
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An ObservedProperty specifies the phenomenon of an Observation.

[width="100%",cols="100%",]
|=======================================================================
a|
Req 10          Each ObservedProperty entity SHALL have the mandatory
properties and MAY have the optional properties listed in Table _8_15.

entities/observedPropertyProperties

a|
Req 11          Each ObservedProperty entity SHALL have the direct
relation between a ObservedProperty entity and other entity types listed
in Table _8_16.

entities/observedPropertyRelations

|=======================================================================

**

 

Table _8_15 Properties of an ObservedProperty entity

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**name**

 a|
The name of the ObservedProperty.

 a|
CharacterString

 a|
One (mandatory)

a|
**definition**

 a|
The IRI of the ObservedProperty. Dereferencing this IRI SHOULD result in
a representation of the definition of the ObservedProperty.

 a|
IRI

 a|
One (mandatory)

a|
**description**

 a|
A description about the ObservedProperty.

 a|
CharacterString[line-through]**

 a|
One (mandatory)

|=======================================================================

**

 

Table _8_16 Direct relation between an ObservedProperty entity and other
entity types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**Datastream**

 a|
One mandatory to many optional

 a|
The Observations of a Datastream observe the same ObservedProperty. The
Observations of different Datastreams MAY observe the same
ObservedProperty.

|=======================================================================

 

Example 6 an example ObservedProperty entity:

[width="100%",cols="100%",]
|=======================================================================
a|
\{

  "id": 1,

  "selfLink": "http://example.org/v1.0/ObservedProperties(1)",

  "Datastreams": \{

    "navigationLink": "ObservedProperties(1)/Datastreams"

  },

 "description": "The dewpoint temperature is the temperature to which
the air must be cooled, at constant pressure, for dew to form. As the
grass and other objects near the ground cool to the dewpoint, some of
the water vapor in the atmosphere condenses into liquid water on the
objects.",

  "name": "DewPoint Temperature",

  "definition": "http://dbpedia.org/page/Dew_point"

}

|=======================================================================

 

8.3.7         Observation
^^^^^^^^^^^^^^^^^^^^^^^^^^

An Observation is act of measuring or otherwise determining the value of
a property [OGC and ISO 19156:2011]

[width="100%",cols="100%",]
|=======================================================================
a|
Req 12          Each Observation entity SHALL have the mandatory
properties and MAY have the optional properties listed in Table _8_17.

entities/observationProperties

a|
Req 13          Each Observation entity SHALL have the direct relation
between an Observation entity and other entity types listed in Table
_8_18.

entities/observationRelations

|=======================================================================

**

 

Table _8_17 Properties of an Observation entity

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**phenomenonTime**

 a|
The time instant or period of when the Observation happens.

 

Note: Many resource-constrained sensing devices do not have a clock. As
a result, a client may omit phenonmenonTime when POST new Observations,
even though phenonmenonTime is a mandatory property. When a SensorThings
service receives a POST Observations without phenonmenonTime, the
service SHALL assign the current server time to the value of the
phenomenonTime.

 a|
TM_Object (ISO 8601 Time string or Time Interval string (e.g.,
2010-12-23T10:20:00.00-07:00 or
2010-12-23T10:20:00.00-07:00/2010-12-23T12:20:00.00-07:00))

 a|
One (mandatory)

a|
**result**

 a|
The estimated value of an ObservedProperty from the Observation.

 a|
Any (depends on the observationType defined in the associated
Datastream)

 a|
One (mandatory)

a|
**resultTime**

 a|
The time of the Observation's result was generated.

 

Note: Many resource-constrained sensing devices do not have a clock. As
a result, a client may omit resultTime when POST new Observations, even
though resultTime is a mandatory property. When a SensorThings service
receives a POST Observations without resultTime, the service SHALL
assign a null value to the resultTime.

 a|
TM_Instant (ISO 8601 Time string)

 a|
One (mandatory)

a|
**resultQuality**

 a|
Describes the quality of the result.

 a|
DQ_Element

 a|
Zero-to-many

a|
**validTime**

 a|
The time period during which the result may be used.

 a|
TM_Period (ISO 8601 Time Interval string)

 a|
Zero-to-one

a|
**parameters**

 a|
Key-value pairs showing the environmental conditions during measurement.

 a|
NamedValues in a JSON Array

 a|
Zero-to-one

|=======================================================================

**

 

Table _8_18 Direct relation between an Observation entity and other
entity types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**Datastream**

 a|
Many optional to one mandatory

 a|
A Datastream can have zero-to-many Observations. One Observation SHALL
occur in one-and-only-one Datastream.

a|
**FeatureOfInterest**

 a|
Many optional to one mandatory

 a|
An Observation observes on one-and-only-one FeatureOfInterest. One
FeatureOfInterest could be observed by zero-to-many Observations.

|=======================================================================

 

Example 7  An Observation entity example - The following example shows
an Observation whose Datastream has an ObservationType of
OM_Measurement. A result?s data type is defined by the observationType.

[width="100%",cols="100%",]
|========================================================
a|
\{

  "id": 1,

  "selfLink": "http://example.org/v1.0/Observations(1)",

  "FeatureOfInterest": \{

    "navigationLink": "Observations(1)/FeatureOfInterest"

  },

  "Datastream": \{

    "navigationLink": "Observations(1)/Datastream"

  },

  "phenomenonTime": "2014-12-31T11:59:59.00+08:00",

  "resultTime": "2014-12-31T11:59:59.00+08:00",

  "result": 70.4

}

|========================================================

8.3.8        FeatureOfInterest
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An Observation results in a value being assigned to a phenomenon. The
phenomenon is a property of a feature, the latter being the
FeatureOfInterest of the Observation [OGC and ISO 19156:2001]. In the
context of the Internet of Things, many Observations? FeatureOfInterest
can be the Location of the Thing. For example, the FeatureOfInterest of
a wifi-connect thermostat can be the Location of the thermostat
(__i.e.__, the living room where the thermostat is located in). In the
case of remote sensing, the FeatureOfInterest can be the geographical
area or volume that is being sensed.

[width="100%",cols="100%",]
|=======================================================================
a|
Req 14          Each FeatureOfInterest entity SHALL have the mandatory
properties and MAY have the optional properties listed in Table _8_19.

entities/featureOfInterestProperties

a|
Req 15          Each FeatureOfInterest entity SHALL have the direct
relation between a FeatureOfInterest entity and other entity types
listed in Table _8_20.

entities/featureOfInterestRelations

|=======================================================================

**

 

Table _8_19 Properties of a FeatureOfInterest entity

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**description**

 a|
The description about the FeatureOfInterest.

 a|
CharacterString

 a|
One (mandatory)

a|
**encodingType**

 a|
The encoding type of the feature property.

Its value is one of the ValueCode enumeration (see Table _8_6 for the
available ValueCode).

 a|
ValueCode

 a|
One (mandatory)

a|
**feature**

 a|
The detailed description of the feature. The data type is defined by
encodingType.

 a|
Anylink:#_msocom_12[[JBr12]] 

 a|
One (mandatory)

|=======================================================================

**

 

Table _8_20 Direct relation between a FeatureOfInterest entity and other
entity types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**Observation**

 a|
One mandatory to many optional

 a|
An Observation observes on one-and-only-one FeatureOfInterest. One
FeatureOfInterest could be observed by zero-to-many Observations.

|=======================================================================

 

Example 8 an example of a FeatureOfInterest entity

[width="100%",cols="100%",]
|=============================================================
a|
\{

  "id": 1,

  "selfLink": "http://example.org/v1.0/FeaturesOfInterest(1)",

  "Observations": \{

    "navigationLink": "FeaturesOfInterest(1)/Observations"

  },

  "description": "This is a weather station.",

  "encodingType": "application/vnd.geo+json",

  "feature": \{

    "type": "Point",

    "coordinates": [

      -114.06,

      51.05

    ]

  }

}link:#_msocom_13[[Steve Lia13]] 

|=============================================================

 

9.    SensorThings Service Interface
------------------------------------

An OGC SensorThings API service exposes a service document resources
that describe its data model. The service document lists the entity sets
that can be CRUD. SensorThings API clients can use the service document
to navigate the available entities in a hypermedia-driven fashion.

9.1           URI Components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The OGC SensorThings API service groups the same types of entities into
_entity sets._ Each entity has a unique identifier and one-to-many
properties. Also, in the case of an entity holding a relationship with
entities in other entity sets, this type of relationship is expressed
with navigation properties (__i.e.__, navigationLink and
associationLink).

Therefore, in order to perform CRUD action on the resources, the first
step is to address to the target resource(s) through URI. There are
three major URI components used here, namely (1) _the_ __service root
URI__, (2) the __resource path__, and (3) the __query options__. In
addition, the service root URI consists of two parts: (1) the location
of the SensorThings service and (2) the version number. The version
number follows the format indicated below:

    "v"majorversionnumber + "." + minorversionnumber

Example 9 complete URI example

http://example.org/v1.0/Observations?$orderby=ID&$top=10

_______________________/___________/___________________/

|                 |               |

service root URI     resource path   query options

 

By attaching the resource path after the service root URI, clients can
address to different types of resources such as an entity set, __an
entity__, __a property__, or __a navigation property__. Finally, clients
can apply query options after the resource path to further process the
addressed resources, such as sorting by properties or filtering with
criteria.

9.2           Resource Path
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The resource path comes right after the service root URI and can be used
to address to different resources. The following lists the usages of the
resource path.

[width="100%",cols="100%",]
|=======================================================================
a|
Req 16          An OGC SensorThings API service SHALL support all the
resource path usages listed in Section _9.2.

service/resourcePath

|=======================================================================

 

9.2.1       Usage 1: no resource path
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**URI Pattern:** SERVICE_ROOT_URI

**Response:** A JSON object with a property named value. The value of
the property SHALL be a JSON Array containing one element for each
entity set of the SensorThings Service.

Each element SHALL be a JSON object link:#_msocom_14[[Carl Reed14]] with
at least two name/value pairs, one with name name containing the name of
the entity set (e.g., Things, Locations, Datastreams, Observations,
ObservedProperties and Sensors) and one with name url containing the URL
of the entity set, which may be an absolute or a relative URL.

[Adapted from OData 4.0-JSON-Format section 5] **

Example 10 a SensorThings request with no resource path

**Example Request: **http://example.org/v1.0/**

**Example Response:**

[width="100%",cols="100%",]
|=========================================================
a|
\{

  "value": [

    \{

      "name": "Things",

      "url": "http://example.org/v1.0/Things"

    },

    \{

      "name": "Locations",

      "url": " http://example.org/v1.0/Locations"

    },

    \{

      "name": "Datastreams",

      "url": " http://example.org/v1.0/Datastreams"

    },

    \{

      "name": "Sensors",

      "url": " http://example.org/v1.0/Sensors"

    },

    \{

      "name": "Observations",

      "url": " http://example.org/v1.0/Observations"

    },

    \{

      "name": "ObservedProperties",

      "url": " http://example.org/v1.0/ObservedProperties"

    },

    \{

      "name": "FeaturesOfInterest",

      "url": " http://example.org/v1.0/FeaturesOfInterest"

    }

  ]

}

|=========================================================

 

9.2.2       Usage 2: address to a collection of entities
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To address to an entity set, users can simply put the entity set name
after the service root URI. The service returns a JSON object with a
property of value. The value of the property SHALL be a list of the
entities in the specified entity set.****

**URI Pattern:** SERVICE_ROOT_URI/ENTITY_SET_NAME****

**Response:** A list of all entities (with all the properties) in the
specified entity set when there is no service-driven pagination imposed.
The response is represented as a JSON object containing a name/value
pair named value. The value of the value name/value pair is a JSON array
where each element is representation of an entity or a representation of
an entity reference. An empty collection is represented as an empty JSON
array.

The count name/value pair represents the number of entities in the
collection. If present, it SHALL come before the value name/value pair.

When there is service-driven pagination imposed, the nextLink annotation
SHALL be included in a response that represents a partial result.

[Adapted from OData 4.0-JSON-Format section 12]

Example 11 an example to address an entity set

**Example Request:** http://example.org/v1.0/ObservedProperties****

**Example Response:**

[width="100%",cols="100%",]
|=======================================================================
a|
\{

  "value": [

    \{

      "id": 1,

      "selfLink": "http://example.org/v1.0/ObservedProperties(1)",

      "Datastreams": \{

        "navigationLink": "ObservedProperties(1)/Datastreams"

      },

      "description": "The dew point is the temperature at which the
water vapor in air at constant barometric pressure condenses into liquid
water at the same rate at which it evaporates.",

      "name": "DewPoint Temperature",

      "definition": "http://dbpedia.org/page/Dew_point"

    },

    \{

      "id": 2,

      "selfLink": "http://example.org/v1.0/ObservedProperties(2)",

      "Datastreams": \{

        "navigationLink": "ObservedProperties(2)/Datastreams"

      },

      "description": "Relative humidity is the ratio of the partial
pressure of water vapor in an air-water mixture to the saturated vapor
pressure of water at a prescribed temperature.",

      "name": "Relative Humidity",

      "definition": "http://dbpedia.org/page/Relative_humidity"

    }

  ]

}

|=======================================================================

**

 

 

9.2.3       Usage 3: address to an entity in a collection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Users can address to a specific entity in an entity set by place the
unique identifier of the entity between brace symbol "()" and put after
the entity set name. The service then returns the entity with all its
properties.****

**URI Pattern:** SERVICE_ROOT_URI/ENTITY_SET_NAME(ID_OF_THE_ENTITY)****

**Response: **A JSON object of the entity (with all its properties) that
holds the specified id in the entity set.

 

*Example 12: an example request that addresses to an entity in a
collection*

**Example Request: **http://example.org/v1.0/Things(1)

 

9.2.4       Usage 4: address to a property of an entity
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Users can address to a property of an entity by specifying the property
name after the URI addressing to the entity. The service then returns
the value of the specified property. If the property has a complex type
value, properties of that value can be addressed by further property
name composition.

If the property is single-valued and has the null value, the service
SHALL respond with 204 No Content. If the property is not available, for
example due to permissions, the service SHALL respond with 404 Not
Found.

[Adapted from OData 4.0-Protocol 11.2.3]

 

**URI Pattern:**
SERVICE_ROOT_URI/RESOURCE_PATH_TO_AN_ENTITY/PROPERTY_NAME****

**Response:** The specified property of an entity that holds the id in
the entity set.

**

 

*Example 13: an example to address to a property of an entity*

**Example Request:**
http://example.org/v1.0/Observations(1)/resultTime****

**Example Response:**

[width="100%",cols="100%",]
|============================================
a|
\{ +
  "resultTime": "2010-12-23T10:20:00-07:00" +
 }

|============================================

 

9.2.5       Usage 5: address to the value of an entity?s property
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To address the raw value of a primitive property, clients append a path
segment containing the            string $value to the property
URL.      

The default format for TM_Object types is text/plain using the ISO8601
format, such as 2014-03-01T13:00:00Z/2015-05-11T15:30:00Z for TM_Period
and 2014-03-01T13:00:00Z for TM_Instant.****

**URI Pattern:**
SERVICE_ROOT_URI/ENTITY_SET_NAME(ID_OF_THE_ENTITY)/PROPERTY_NAME/$value

**Response:** The raw value of the specified property of an entity that
holds the id in the entity set.

 

*Example 14: an example of addressing to the value of an entity?s
property*

**Example:**
http://example.org/v1.0/Observations(1)/resultTime/$value[http://example.org/v1.0/Observations(1)/resultTime/$value]****

**Example Response:**

[width="100%",cols="100%",]
|========================
a|
2015-01-12T23:00:13-07:00

|========================

**

 

9.2.6       Usage 6: address to a navigation property (navigationLink)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As the entities in different entity sets may hold some relationships,
users can request the linked entities by addressing to a navigation
property of an entity. The service then returns one or many entities
that hold a certain relationship with the specified entity.****

**URI Pattern:**
SERVICE_ROOT_URI/ENTITY_SET_NAME(ID_OF_THE_ENTITY)/LINK_NAME****

**Response:** A JSON object of one entity or a JSON array of many
entities that holds a certain relationship with the specified
entity.****

**

 

*Example 15: an example request addressing to a navigational property*

**Example: **http://example.org/v1.0/Datastreams(1)/Observations returns
all the Observations in the Datastream that holds the id 1.

 

9.2.7       Usage 7: address to an associationLink
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As the entities in different entity sets may hold some relationships,
users can request the linked entities? selfLinks by addressing to an
association link of an entity. An associationLink can be used to
retrieve a reference to an entity or an entity set related to the
current entity. Only the selfLinks of related entities are returned when
resolving associationLinks.****

**URI Pattern:**
SERVICE_ROOT_URI/ENTITY_SET_NAME(KEY_OF_THE_ENTITY)/LINK_NAME/$ref****

**Response:** A JSON object with a value property. The value of the
value property is a JSON array containing one element for each
associationLink. Each element is a JSON object with a name/value pairs.
The name is url and the value is the selfLinks of the related entities.

**

 

*Example 16: an example of addressing to an association link*

**Example Request:
**http://example.org/v1.0/Datastreams(1)/Observations/$ref returns all
the selfLinks of the Observations of Datastream(1). **

**Example Response:**

[width="100%",cols="100%",]
|=====================================================
a|
\{

  "value": [

    \{

      "url": "http://example.org/v1.0/Observations(1)"

    },

    \{

      "url": "http://example.org/v1.0/Observations(2)"

    }

  ]

}

|=====================================================

 

9.2.8       Usage 8: nested resource path
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As users can use navigation properties to link from one entity set to
another, users can further extend the resource path with unique
identifiers, properties, or links (__i.e.__, Usage 3, 4 and 6).

*Example 17: examples of nested resource path*

**Example Request 1:
**http://example.org/v1.0/Datastreams(1)/Observations(1) returns a
specific Observation entity in the Datastream.****

**Example Request 2:
**http://example.org/v1.0/Datastreams(1)/Observations(1)/resultTime
turns the resultTime property of the specified Observation in the
Datastream.****

**Example Request 3:
**http://example.org/v1.0/Datastreams(1)/Observations(1)/FeatureOfInterest
returns the FeatureOfInterest entity of the specified Observation in the
Datastream.

 

9.3           Requesting Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clients issue HTTP GET requests to OGC SensorThings API services for
data.

The resource path of the URL specifies the target of the request.
Additional query operators can be specified through query options that
are presented as follows.

[width="100%",cols="100%",]
|=======================================================================
a|
Req 17          OGC SensorThings API services are hypermedia driven
services that return URLs to the client. If a client subsequently
requests the advertised resource and the URL has expired, then the
service SHOULD respond with 410 Gone. If this is not feasible, the
service SHALL respond with 404 Not Found.

requestData/responseCode

|=======================================================================

 

9.3.1       Evaluating System Query Options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

[width="100%",cols="100%",]
|=======================================================================
a|
Req 18          An OGC SensorThings API service SHALL evaluate the
system query options following the order specified in
9.4.1.link:#_msocom_15[[Carl Reed15]] 

requestData/order

|=======================================================================

**

 

The OGC SensorThings API adapts many of OData?s system query options and
their usage. These query options allow refining the request.

The result of the service request SHALL be as if the system query
options were evaluated in the following order.

Prior to applying any server-driven pagination:

?       $filter

?       $count

?       $orderby

?       $skip

?       $top

After applying any server-driven pagination:

?       $expand

?       $select

9.3.2       Specifying Properties to Return
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The $select and $expand system query options enable the client to
specify the set of properties to be included in a response. The service
MAY include additional properties not specified in $select and $expand
query options.

9.3.2.1     $expand
+++++++++++++++++++

[width="100%",cols="100%",]
|=======================================================================
a|
Req 19          An OGC SensorThings API service SHOULD
link:#_msocom_16[[Carl Reed16]] support the $expand query option.

requestData/expand

|=======================================================================

**

 

The $expand system query option indicates the related entities to be
represented inline. The value of the $expand query option must be a
comma separated list of navigation property names. Additionally each
navigation property can be followed by a forward slash and another
navigation property to enable identifying a multi-level
relationship.****

*Example 18: examples of $expand query option*

**Example 1:** http://example.org/v1.0/Things?$expand=Datastreams
returns the entity set of Things as well as each of the Datastreams
associated with each Thing entity.****

**Example 2:**
http://example.org/v1.0/Things?$expand=Datastreams/ObservedProperty
returns the collection of Things, the Datastreams associated with each
Thing, and the ObservedProperty associated with each Datastream.****

**Example 3:**

http://example.org/v1.0/Datastreams(1)?$expand=Observations,ObservedProperty
returns the Datastream whose id is 1 as well as the Observations and
ObservedProperty associated with this Datastream.

Query options can be applied to the expanded navigation property by
appending a semicolon-separated list of query options, enclosed in
parentheses, to the navigation property name. Allowed system query
options are $filter, $select, $orderby, $skip, $top, $count, and
$expand.

[Adapted from OData 4.0- URL 5.1.2]****

**Example 4:**
http://example.org/v1.0/Datastreams(1)?$expand=Observations[http://example.org/v1.0/Datastreams(1)?$expand=Observations]($filter=result
eq 1) returns the Datastream whose id is 1 as well as its Observations
with a result equal to 1.

9.3.2.2     $select
+++++++++++++++++++

[width="100%",cols="100%",]
|=======================================================================
a|
Req 20          An OGC SensorThings API service SHOULD support the
$select link:#_msocom_17[[Carl Reed17]] query option. The usage of the
$select query option SHALL support the usages listed in Section 9.4.2.2.

requestData/select

|=======================================================================

**

 

The $select system query option requests that the service to return only
the properties explicitly requested by the client. The value of a
$select query option is a comma-separated list of selection clauses.
Each selection clause may be a property name (including navigation
property names). The service returns the specified content, if
available, along with any available expanded navigation properties. The
service MAY return additional information.

[Adapted from OData 4.0-Protocol 11.2.4.1]

 

*Example 19: examples of $select query option*

**Example 1:**
http://example.org/v1.0/Observations?$select=result,resultTime returns
only the result and resultTime properties for each Observation
entity.****

**Example 2:**
http://example.org/v1.0/Datastreams(1)?$select=id,Observations&$expand=Observations/FeatureOfInterest
returns the id property of the Datastream entity, and all the properties
of the entity identified by the Observations and FeatureOfInterest
navigation properties.****

**Example 3:**
http://example.org/v1.0/Datastreams(1)?$expand=Observations[http://example.org/v1.0/Datastreams(1)?$expand=Observations]($select=result)
returns the Datastream whose id is 1 as well as the result property of
the entity identified by the Observations navigation property.

9.4           Query Entity Sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The OGC SensorThings API services support requests for data via HTTP GET
requests. Clients can apply query operators to further process the
addressed resources. The query operators are prefixed with a dollar ($)
character and specified as key-value pairs after the question symbol "?"
in the request URI. Many of the OGC SensorThings API?s query options are
adapted from OData?s query options. OData developers should be able to
pick up SensorThings API query options very quickly.

[width="100%",cols="100%",]
|=======================================================================
a|
Req 21          An OGC SensorThings API service MAY support
link:#_msocom_18[[Carl Reed18]] some or all of the system query options
defined in this specification. If a service does not support a system
query option, it SHALL fail any request that contains the unsupported
option and SHOULD return 501 Not Implemented.

queryOptions/responseCode

|=======================================================================

 

 

9.4.1       $orderby
^^^^^^^^^^^^^^^^^^^^

[width="100%",cols="100%",]
|=======================================================================
a|
Req 22          An OGC SensorThings API service SHOULD
link:#_msocom_19[[Carl Reed19]] support the $orderby query option. The
usage of the $orderby query option SHALL support the usages listed in
Section 9.5.1

queryOptions/orderBy

|=======================================================================

**

 

The $orderby system query option specifies the order in which items are
returned from the service.

The value of the $orderby system query option contains a comma-separated
list of expressions whose primitive result values are used to sort the
items. A special case of such an expression is a property path
terminating on a primitive property. A type cast using the qualified
entity type name is required to order by a property defined on a derived
type.

The expression can include the suffix asc for ascending or desc for
descending, separated from the property name by one or more spaces. If
asc or desc is not specified, the service SHALL order
link:#_msocom_20[[Carl Reed20]] by the specified property in ascending
order.

Null values come before non-null values when sorting in ascending order
and after non-null values when sorting in descending order.

Items are sorted by the result values of the first expression, and then
items with the same value for the first expression are sorted by the
result value of the second expression, and so on

[Note: Adapted from OData 4.0-Protocol 11.2.5.2]

 

*Example 20: examples of $orderby query option*

**Example 1: **http://example.org/v1.0/Observations?$orderby=result
returns all Observations ordered by the result property in ascending
order.****

*Example 2: *

http://example.org/v1.0/Observations?$expand=Datastream&$orderby=Datastreams/id
desc, phenomenonTimelink:#_msocom_21[[TK21]]  returns all Observations
ordered by the id property of the linked Datastream entry in descending
order, then by the phenomenonTime property of Observations in ascending
order.

9.4.2       $top
^^^^^^^^^^^^^^^^

[width="100%",cols="100%",]
|=======================================================================
a|
Req 23          An OGC SensorThings API service SHOULD support the $top
query option. The usage of the $top query option SHALL support the
usages listed in Section 9.5.2

queryOptions/top

|=======================================================================

**

 

The $top system query option specifies a non-negative integer n that
limits the number of items returned from a collection of entities. The
service returns the number of available items up to but not greater than
the specified value n.

If no unique ordering is imposed through an $orderby query option, the
service SHALL impose a stable ordering across requests that include
$top.

[Note: Adapted from OData 4.0-Protocol 11.2.5.3]

In addition, if the $top value exceeds the service-driven pagination
limitation (__i.e.__, the largest number of entities the service can
return in a single response), the $top query option SHALL be discarded
and the server-side pagination limitation SHALL be imposed.

 

*Example 21: examples of $top query option*

**Example 1:** http://example.org/v1.0/Things?$top=5 returns only the
first five entities in the Things collection.****

**Example 2:**
http://example.org/v1.0/Observations?$top=5&$orderby=phenomenonTime desc
returns the first five Observation entries after sorted by the
phenomenonTime property in descending order.

9.4.3       $skip
^^^^^^^^^^^^^^^^^

[width="100%",cols="100%",]
|=======================================================================
a|
Req 24          An OGC SensorThings API service SHOULD support
link:#_msocom_22[[Carl Reed22]] the $skip query option. The usage of the
$skip query option SHALL support link:#_msocom_23[[Carl Reed23]] the
usages listed in Section 9.5.3

queryOptions/skip

|=======================================================================

**

 

The $skip system query option specifies a non-negative integer n that
excludes the first n items of the queried collection from the result.
The service returns items starting at position n+1.

 

*Example 22: examples of $skip query option*

**Example 1:** http://example.org/v1.0/Things?$skip=5 returns Thing
entities starting with the sixth Thing entity in the Things collection.

Where $top and $skip are used together, $skip SHALL be applied before
$top, regardless of the order in which they appear in the request.

If no unique ordering is imposed through an $orderby query option, the
service SHALL impose a stable ordering across requests that include
$skip.

[Note: Adapted from OData 4.0-Protocol 11.2.5.4]****

**Example 2:**
http://example.org/v1.0/Observations?$skip=2&$top=2&$orderby=resultTime
returns the third and fourth Observation entities from the collection of
all Observation entities when the collection is sorted by the resultTime
property in ascending order.

9.4.4       $count
^^^^^^^^^^^^^^^^^^

[width="100%",cols="100%",]
|=======================================================================
a|
Req 25          An OGC SensorThings API service SHOULD support the
$count query option. The usage of the $count query option SHALL support
the usages listed in Section 9.5.4link:#_msocom_24[[Carl Reed24]] 

queryOptions/count

|=======================================================================

 

The $count system query option with a value of true specifies that the
total count of items within a collection matching the request be
returned along with the result.

A $count query option with a value of false (or not specified) hints
that the service SHOULD NOT return a count.

The service returns an HTTP Status code of 400 Bad Request if a value
other than true or false is specified.

The $count system query option ignores any $top, $skip, or $expand query
options, and returns the total count of results across all pages
including only those results matching any specified $filter. Clients
should be aware that the count returned inline may not exactly equal the
actual number of items returned, due to latency between calculating the
count and enumerating the last value or due to inexact calculations on
the service.

[Adapted from OData 4.0-Protocol 11.2.5.5]

 

*Example 23: examples of $count query option*

**Example 1:** http://example.org/v1.0/Things?$count=true return, along
with the results, the total number of Things in the collection.****

**Example Response:**

[width="100%",cols="100%",]
|============
a|
\{

  "count": 2,

  "value": [

    \{?},

    \{?}

  ]

}

|============

 

9.4.5      $filter
^^^^^^^^^^^^^^^^^^

[width="100%",cols="100%",]
|=======================================================================
a|
Req 26          An OGC SensorThings API service SHOULD support
link:#_msocom_25[[Carl Reed25]] the $filter query option.

queryOptions/filter

|=======================================================================

**

 

The $filter system query option allows clients to filter a collection of
entities that are addressed by a request URL. The expression specified
with $filter is evaluated for each entity in the collection, and only
items where the expression evaluates to true are included in the
response. Entities for which the expression evaluates to false or to
null, or which reference properties that are unavailable due to
permissions, are omitted from the response.

[Adapted from Data 4.0-URL Conventions 5.1.1]

The expression language that is used in $filter operators supports
references to properties and literals. The literal values can be strings
enclosed in single quotes, numbers and boolean values (true or false) or
datetime values represented as ISO 8601 time string.

 

*Example 24: examples of $filter query option*

**Example 1: **http://example.org/v1.0/Observations?$filter=result lt
10.00 returns all Observations whose result is less than 10.00.

In addition, clients MAY use the properties of linked entities in the
$filter predicate. The following are examples of the possible uses of
the $filter in the data model of the SensorThings service.****

**Example 2:**
http://example.org/v1.0/Observations?$filter=Datastream/id eq '1'
returns all Observations whose Datastream?s id is 1.****

**Example 3:**
http://example.org/v1.0/Things?$filter=geo.distance(Locations/location,
geography'POINT(-122, 43)'link:#_msocom_26[[Steve
Lia26]] link:#_msocom_27[[Alec Huan27]] ) gt 1 returns Things that the
distance between their last known locations and POINT(-122 43) is
greater than 1. link:#_msocom_28[[Steve Lia28]] **

*Example 4:*

http://example.org/v1.0/Things?$expand=
Datastreams/Observations/FeatureOfInterest&$filter=Datastreams/Observations/FeatureOfInterest/id
eq 'FOI_1' and Datastreams/Observations/resultTime ge
2010-06-01T00:00:00Z and Datastreams/Observations/resultTime le
2010-07-01T00:00:00Z link:#_msocom_29[[TK29]] returns Things that have
any observations of a feature of interest with a unique identifier
equals to 'FOI_1' in June 2010.

9.4.5.1    Built-in filter operations
+++++++++++++++++++++++++++++++++++++

The OGC SensorThings API supports a set of built-in filter operations,
as described in the following table. These built-in filter operator
usages and definitions follow the
http://docs.oasis-open.org/odata/odata/v4.0/errata01/os/complete/part1-protocol/odata-v4.0-errata01-os-part1-protocol-complete.html#_Toc399426798[OData
Specification Section 11.2.5.1.1] and
http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/abnf/odata-abnf-construction-rules.txt[OData
Version 4.0 ABNF].

[width="100%",cols="100%",]
|=======================================================================
a|
Req 27          An OGC SensorThings API service SHOULD support the
built-in filter operations listed in Table _9_1.

queryOptions/builtInFilterOperations

|=======================================================================

**

 

Table _9_1 Built-in Filter Operators

*Operator*

*Description*

**Example**

**Comparison Operators**

eq

Equal

/ObservedProperties?$filter=unitOfMeasurement/name eq 'degree Celsius'

ne

Not equal

/ObservedProperties?$filter=unitOfMeasurement/name ne 'degree Celsius'

gt

Greater than

/Observations?$filter=result gt 20.0

ge

Greater than or equal

/Observations?$filter=result ge 20.0

lt

Less than

/Observations?$filter=result lt 100

le

Less than or equal

/Observations?$filter=result le 100

**Logical Operators**

and

Logical and

/Observations?$filter=result le 3.5 and FeatureOfInterest/id eq '1'

or

Logical or

/Observations?$filter=result gt 20 or result le 3.5

not

Logical negation

/Things?$filter=not startswith(description,'test')

**Arithmetic Operators**

add

Addition

/Observations?$filter=result add 5 gt 10

sub

Subtraction

/Observations?$filter=result sub 5 gt 10

mul

Multiplication

/Observations?$filter=result mul 2 gt 2000

div

Division

/Observations?$filter=result div 2 gt 4

mod

Modulo

/Observations?$filter=result mod 2 eq 0

**Grouping Operators**

( )

Precedence grouping

/Observations?$filter=(result sub 5) gt 10

 

9.4.5.2    Built-in query functions
+++++++++++++++++++++++++++++++++++

The OGC SensorThings API supports a set of functions that can be used
with the $filter or $orderby query operations. The following table lists
the available functions and they follows the OData Canonical function
definitions listed in
http://docs.oasis-open.org/odata/odata/v4.0/errata01/os/complete/part2-url-conventions/odata-v4.0-errata01-os-part2-url-conventions-complete.html#_Toc395267133[Section
5.1.1.4 of the OData Version 4.0 Part 2: URL Conventions] and the syntax
rules for these functions are defined in
http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/abnf/odata-abnf-construction-rules.txt[OData
Version 4.0 ABNF].

In order to support spatial relationship functions, SensorThings API
defines nine additional geospatial functions based on the spatial
relationship between two geometry objects. The spatial relationship
functions are defined in the OGC Simple Feature Access specification
(part 1, clause 6.1.2.3). The names of these nine functions start with a
prefix "st_" following the OGC Simple Feature Access specification (OGC
06-104r4). In addition, the Well-Known Text (WKT) format is the default
input geometry for these nine functions.

[width="100%",cols="100%",]
|=======================================================================
a|
Req 28          An OGC SensorThings API service SHOULD support
link:#_msocom_30[[Carl Reed30]] the built-in query functions listed in
Table _9_2.

queryOptions/builtInQueryFunctions

|=======================================================================

**

 

Table _9_2 Built-in Query Functions

*Function*

**Example**

**String Functions**

bool substringof(string p0, string p1)

substringof('Sensor Things',description)

bool endswith(string p0, string p1)

endswith(description,'Things')

bool startswith(string p0, string p1)

startswith(description,'Sensor')

int length(string p0)

length(description) eq 13

int indexof(string p0, string p1)

indexof(description,'Sensor') eq 1

string substring(string p0, int p1)

substring(description,1) eq 'ensor Things'

string tolower(string p0)

tolower(description) eq 'sensor things'

string toupper(string p0)

toupper(description) eq 'SENSOR THINGS'

string trim(string p0)

trim(description) eq 'Sensor Things'

string concat(string p0, string p1)

concat(concat(unitOfMeasurement/symbol,', '), unitOfMeasurement/name) eq
'degree, Celsius'

**Date Functions**

int year

year(resultTime) eq 2015

int month

month(resultTime) eq 12

int day

day(resultTime) eq 8

int hour

hour(resultTime) eq 1

int minute

minute(resultTime) eq 0

int second

second(resultTime) eq 0

int fractionalseconds

second(resultTime) eq 0

int date

date(resultTime) ne date(validTime)

time

time(resultTime) le validTime

int totaloffsetminutes

totaloffsetminutes(resultTime) eq 60

now

resultTime ge now()

mindatetime

resultTime eq mindatetime()

maxdatetime

resultTime eq maxdatetime()

**Math Functions**

round

round(result) eq 32

floor

floor(result) eq 32

ceiling

ceiling(result) eq 33

**Geospatial Functions**

double geo.distance(Point p0, Point p1)

geo.distance(location, geography'POINT (30 10) ')

double geo.length(LineString p0)

geo.length(geography'LINESTRING (30 10, 10 30, 40 40) ')

bool geo.intersects(Point p0, Polygon p1)

geo.intersects(location, geography'POLYGON ((30 10, 10 20, 20 40, 40 40,
30 10))')

**Spatial Relationship Functions**

bool st_equals

st_equals(location, geography'POINT (30 10)')

bool st_disjoint

st_disjoint(location, geography'POLYGON ((30 10, 10 20, 20 40, 40 40, 30
10))')

bool st_touches

st_touches(location, geography'LINESTRING (30 10, 10 30, 40 40)')

bool st_within

st_within(location, geography'POLYGON ((30 10, 10 20, 20 40, 40 40, 30
10))')

bool st_overlaps

st_overlaps(location, geography'POLYGON ((30 10, 10 20, 20 40, 40 40, 30
10))')

bool st_crosses

st_crosses(location, geography'LINESTRING (30 10, 10 30, 40 40)')

bool st_intersects

st_intersects(location, geography'LINESTRING (30 10, 10 30, 40 40)')

bool st_contains

st_contains(location, geography'POINT (30 10)')

bool st_relate

st_relate(location, geography'POLYGON ((30 10, 10 20, 20 40, 40 40, 30
10))', 'T********')

 

9.4.6       Server-Driven Paging (nextLink)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

[width="100%",cols="100%",]
|=======================================================================
a|
Req 29          An OGC SensorThings API service SHOULD support
link:#_msocom_31[[Carl Reed31]] the server-driven paging mechanism
listed in section _9.4.6.

queryOptions/pagination

|=======================================================================

 

Responses that include only a partial set of the items identified by the
request URL SHALL contain a link that allows retrieving the next partial
set of items. This link is called a nextLink; its representation is
format-specific. The final partial set of items SHALL NOT contain a
nextLink.

The nextLink annotation indicates that a response is only a subset of
the requested collection of entities or collection of entity references.
It contains a URL that allows retrieving the next subset of the
requested collection.

SensorThings clients SHALL treat the URL of the nextLink as opaque, and
SHALL NOT append system query options to the URL of a next link.
Services may not allow a change of format on requests for subsequent
pages using the next link.

[Adapted from OData 4.0-Protocol 11.2.5.7]****

**Example 25:** http://example.org/v1.0/Things returns a subset of the
Thing entities of requested collection of Things. The nextLink contains
a link allowing retrieving the next partial set of items.****

**Example Response:**

[width="100%",cols="100%",]
|=================================================================
a|
\{

  "value": [

    \{?},

    \{?}

  ],

  "nextLink": "http://examples.org/v1.0/Things?$top=100&$skip=100"

}

|=================================================================

10. Sensing Profile CRUD
------------------------

10.1        Overview
~~~~~~~~~~~~~~~~~~~~

As many IoT devices are resource-constrained, the SensorThings API
adopts the efficient REST web service style. That means the CRUD actions
can be performed on the SensorThings entity types. The following
subsection explains the CRUD protocol.

10.2         Create an entity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[width="100%",cols="100%",]
|=======================================================================
a|
Req 30          To create an entity in a collection, the client SHALL
send a HTTP POST request to that collection's URL. The POST body SHALL
contain a single valid entity representation.

If the target URL for the collection is a navigationLink, the new entity
is automatically linked to the entity containing the navigationLink.

Upon successful completion, the response SHALL contain a HTTP location
header that contains the edit URL or read URL of the created entity.

Upon successful completion the service SHALL respond with either 201
Created, or 204 No Content.

[Adapted from Data 4.0-Protocol, 11.4.2 Create an Entity]

In addition, the link between entities SHALL be established upon
creating an entity. Two use cases SHALL be considered: (1) link to
existing entities when creating an entity, and (2) create related
entities when creating an entity. The requests for these two use cases
are described in the following subsection.

When clients create resources in a SensorThings service, they SHALL
follow the integrity constraints listed in Table 7-3. For example, a
Datastream entity must link to a Thing entity. When a client wants to
create a Datastream entity, the client needs to either (1) create a
linked Thing entity in the same request or (2) link to an already
created Thing entity. The complete integrity constraints for creating
resources are shown in the following table.

Special case #1 - When creating an Observation entity that links to a
FeatureOfInterest entity: Sometimes the FeatureOfInterest of an
Observation is the Location of the Thing. For example, a wifi-connected
thermostat?s temperature observation?s feature-of-interest can be the
location of the smart thermostat, that is the room where the smart
thermostat is located in.

In this case, when a client creates an Observation entity, the client
SHOULD omit the link to a FeatureOfInterest entity in the POST body
message. And if the service detects that there is no link to a
FeatureOfInterest entity in the POST body message that creates an
Observation entity, the service SHALL create a FeatureOfInterest entity
by using the location property from the Location of the Thing entity.

Special case #2: In the context of IoT, many Observations? resultTime
and phenomenonTime cannot be distinguished or the resultTime is not
available. In this case, when a client creates an Observation entity,
the client MAY omit the resultTime and the service should assign a null
value to the resultTime.

 

sensingCreate/entity

|=======================================================================

**

 

**

 

Table _10_1 Integrity constraints when creating an entity

*Scenario*

**Integrity Constraints**

**Create a **Thing **entity**

-

**Create a **Location** entity**

-

**Create a **Datastream** entity**

SHALL link to a Thing entity.

SHALL link to a Sensor entity

SHALL link to an ObservedProperty entity.

**Create a **Sensor** entity**

-

**Create an **ObservedProperty** entity**

-

**Create an **Observation** entity**

SHALL link to a Datastream entity.

SHALL link to a FeatureOfInterest entity. If no link specified, the
service SHALL create a FeatureOfInterest entity from the content of the
Location entities.

**Create a **FeatureOfInterest** entity**

-

 

**

 

10.2.1    Request
^^^^^^^^^^^^^^^^^

**HTTP Method:** POST****

**URI Pattern: **SERVICE_ROOT_URI/COLLECTION_NAME**

**Header:** Content-Type: application/json****

**Message Body:** A single valid entity representation for the specified
collection.****

*Example 26: create a Thing entity*

[width="100%",cols="100%",]
|=============================================
a|
**POST /Things HTTP/1.1**

 

**Host:** example.org/v1.0****

**Content-Type:** application/json

 

\{

   "description":"This is a smart thermostat."

}

|=============================================

 

10.2.1.1 Link to existing entities when creating an entity
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

[width="100%",cols="100%",]
|=======================================================================
a|
Req 31          A SensorThings API service, that supports entity
creation, SHALL support linking new entities to existing entities upon
creation. To create a new entity with links to existing entities in a
single request, the client SHALL include the unique identifiers of the
related entities associated with the corresponding navigation properties
in the request body.

In the case of creating an Observation whose FeatureOfInterest is the
Thing?s Location (that means the Thing entity has a related Location
entity), the request of creating the Observation SHOULD NOT include a
link to a FeatureOfInterest entity. The service will first automatically
create a FeatureOfInterest entity from the Location of the Thing and
then link to the Observation.

In the complex use case of a Thing has multiple Location
representations, the service SHOULD decide the default Location encoding
when an Observation?s FeatureOfInterest is the Thing?s Location.

 

sensingCreate/links

|=======================================================================

**

 

**Example 27:** *create an* *Observation entity, which links to an
existing Sensor entity (whose id is 1), an existing FeatureOfInterest
entity (whose id is 2).*

[width="100%",cols="100%",]
|===============================================
a|
*POST /Observations HTTP/1.1*

**Host:** example.org/v1.0****

**Content-Type:** application/json

 

\{

  "Datastream": \{

    "id": 1

  },

  "phenomenonTime": ?2013-04-18T16:15:00-07:00",

  "result": 124,

  "featureOfInterest": \{

    "id": 1

  }

}

|===============================================

 

10.2.1.2 Create related entities when creating an entity
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

[width="100%",cols="100%",]
|=======================================================================
a|
Req 32          A request to create an entity that includes related
entities, represented using the appropriate inline representation, is
referred to as a "deep insert". A SensorThings service that supports
entity creation SHALL support deep insert.

If the inline representation contains a value for a computed property
(__i.e.__, id), the service SHALL ignore that value when creating the
related entity.

On success, the service SHALL create all entities and relate them. On
failure, the service SHALL NOT create any of the entities.

[Adapted from Data 4.0-Protocol 11.4.2.2]

sensingCreate/links

|=======================================================================

**

 

 

*Example 28: create a Thing while creating two related Sensors and one
related Observation (which links to an existing FeatureOfInterest entity
and an existing ObservedProperty entity).*

[width="100%",cols="100%",]
|=======================================================================
a|
*POST /Things HTTP1.1*

**Host: **example.org/v1.0****

**Content-Type: **application/json

 

\{

  "description": "This a Thing with one Datastream.",

  "Locations": [

    \{

      "encodingType": "application/vnd.geo+json",

      "location": \{

        "type": "POINT",

        "coordinates": [10,10]

      }

    }

  ],

  "Datastreams": [

    \{

      "description": "This is a datastream for an oven?s internal
temperature.",

      "unitOfMeasurement": \{

        "name": "degree Celsius",

        "symbol": "?C",

        "definition": "http://unitsofmeasure.org/ucum.html#para-30"

      },

      "observationType":
"http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement",

      "observedArea": \{

        "type": "Polygon",

        "coordinates": [

           [[100,0],[101,0],[101,1],[100,1],[100,0]]

        ]     

      },

      "phenomenonTime":
"2009-01-11T16:22:25.00Z/2011-08-21T08:32:10.00Z",

      "Observations": [

        \{

          "phenomenonTime": "2012-06-26T03:42:02-0600",

          "result": 70.4,

          "FeatureOfInterest": \{

            "description": "This is room CCIT #361.",

            "encodingType": "application/vnd.geo+json",

            "feature": \{

              "type": "POLYGON",

              "coordinates": [

               
[[100,50],[10,9],[23,4],[100,50]],[[30,20],[10,4],[4,22],[30,20]]             

              ]

            }

          }

        }

      ],

      "ObservedProperty": \{

        "name": "DewPoint Temperature",

        "definition":
"http://sweet.jpl.nasa.gov/ontology/property.owl#DewPointTemperature",

        "description": "The dewpoint temperature is the temperature to
which the air must be cooled, at constant pressure, for dew to form. As
the grass and other objects near the ground cool to the dewpoint, some
of the water vapor in the atmosphere condenses into liquid water on the
objects."

      },

      "Sensor": \{

        "encodingType": "application/pdf",

        "metadata": "http://datasheets.maxim-ic.com/en/ds/DS18B20.pdf"

      }

    }

  ]

}

|=======================================================================

 

 

10.2.2   Response
^^^^^^^^^^^^^^^^^

[width="100%",cols="100%",]
|=======================================================================
a|
Req 33          Upon successfully creating an entity, the service
response SHALL contain a Location header that contains the URL of the
created entity. Upon successful completion the service SHALL respond
with 201 Created. Regarding all the HTTP status code, please refer to
the HTTP Status Code section.

sensingCreate/deepInsert

|=======================================================================

 

10.3        Read entities
~~~~~~~~~~~~~~~~~~~~~~~~~

[width="100%",cols="100%",]
|=======================================================================
a|
Req 34          A SensorThings service SHALL support reading resources
as defined in Section _10.3.link:#_msocom_32[[Carl Reed32]] 

sensingRead/entity

|=======================================================================

**

 

10.3.1   Request
^^^^^^^^^^^^^^^^

**HTTP Method:** GET****

**URI Pattern: **Refer to the SensorThings service interface section
(__i.e.__, section _9), including resource path and query options

10.3.2   Response
^^^^^^^^^^^^^^^^^

The detail explanation about the encodings of resources in the Sensing
Profile can be found in section _8.3.

Upon successfully retrieve resources, the service SHALL respond with 200
OK. Regarding all the HTTP status code, please refer to the HTTP Status
Code section.

10.4        Update an entity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[width="100%",cols="100%",]
|=======================================================================
a|
Req 35          To update an entity in a collection a SensorThings
service SHALL follow the requirements as defined in Section _10.4.

sensingUpdate/entity

|=======================================================================

**

 

10.4.1   Request
^^^^^^^^^^^^^^^^

Services SHOULD support PATCH as the preferred means of updating an
entity. PATCH provides more resiliency between clients and services by
directly modifying only those values specified by the client.

The semantics of PATCH, as defined in
[http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#RFC5789[RFC5789]],
is to merge the content in the request payload with the entity?s current
state, applying the update only to those components specified in the
request body. The properties provided in the payload corresponding to
updatable properties SHALL replace the value of the corresponding
property in the entity. Missing properties of the containing entity or
complex property SHALL NOT be directly altered.

Services MAY additionally support PUT, but should be aware of the
potential for data-loss in round-tripping properties that the client may
not know about in advance, such as open or added properties, or
properties not specified in metadata. Services that support PUT SHALL
replace all values of structural properties with those specified in the
request body. Omitting a non-nullable property with no service-generated
or default value from a PUT request results in a 400 Bad Request error.

Key and other non-updatable properties that are not tied to key
properties of the principal entity, can be omitted from the request. If
the request contains a value for one of these properties, the service
SHALL ignore that value when applying the update.

The service ignores entity id in the payload when applying the update.

The entity SHALL NOT contain related entities as inline content. It MAY
contain binding information for navigation properties. For single-valued
navigation properties this replaces the relationship. For
collection-valued navigation properties this adds to the relationship.

On success, the response SHALL be a valid success response.

[Adapted from OData 4.0-Protocol 11.4.3]

 

**HTTP Method:** PATCH or PUT****

**URI Pattern:** An URI addressing to a single entity.****

**Header:** Content-Type: application/json

**Message Body:** A single entity representation including a subset of
properties for the specified collection.****

**Example 29:** *update the* *Thing whose id is 1.*

[width="100%",cols="100%",]
|=======================================
a|
*PATCH Things(1) HTTP1.1*

**Host:** example.org/v1.0/****

**Content-Type: **application/json

 

\{

  "description":"This thing is an oven."

}

|=======================================

 

10.4.2   Response
^^^^^^^^^^^^^^^^^

On success, the response SHALL be a valid success response. In addition,
when the client sends an update request to a valid URL where an entity
does not exist, the service SHALL fail the
request.link:#_msocom_33[[Steve Lia33]] 

Upon successful completion, the service must respond with 200 OK or 204
No Content. Regarding all the HTTP status code, please refer to the HTTP
Status Code section.

10.5        Delete an entity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 

[width="100%",cols="100%",]
|=======================================================================
a|
Req36           To delete an entity in a collection a SensorThings
service SHALL follow the requirements as defined in section _10.5.

sensingDelete/entity

|=======================================================================

10.5.1   Request
^^^^^^^^^^^^^^^^

A successful DELETE request to an entity's edit URL deletes the entity.
The request body SHOULD be empty. 

Services SHALL implicitly remove relations to and from an entity when
deleting it; clients need not delete the relations explicitly.

Services MAY implicitly delete or modify related entities if required by
integrity constraints. Table _10_2 listed SensorThings API?s integrity
constraints when deleting an entity.****

**HTTP Method: **DELETE**

**URI Pattern:** An URI addressing to a single entity.

 

**Example 30:** *delete the* *Thing with unique identifier equals to 1*

[width="100%",cols="100%",]
|=========================================
a|
*DELETE http://example.org/v1.0/Things(1)*

|=========================================

* *

Table _10_2 Integrity constraints when deleting an entity

[width="100%",cols="50%,50%",]
|=======================================================================
a|
*Scenario*

 a|
**Integrity Constraints**

a|
**Delete a **Thing** entity**

 a|
Delete all the Datastream entities linked to the Thing entity.

a|
link:#_msocom_34[[Tania Kha34]] *Delete a *Location* entity*

 a|
Delete all the HistoricalLocationlink:#_msocom_35[[TK35]]  entities
linked to the Location entitylink:#_msocom_36[[Office36]] 

a|
**Delete a **Datastream** entity**

 a|
Delete all the Observation entities linked to the Datastream entity.

a|
**Delete a **Sensor** entity**

 a|
Delete all the Datastream entities linked to the Sensor entity.

a|
**Delete an **ObservedProperty** entity**

 a|
Delete all the Datastream entities linked to the ObservedProperty
entity.

a|
**Delete an** Observation** entity**

 a|
-

a|
**Delete a **FeatureOfInterest** entity**

 a|
Delete all the Observation entities linked to the FeatureOfInterest
entity.

a|
**Delete a **HistoricalLocation entity **entity.**

 a|
-link:#_msocom_37[[TK37]] 

|=======================================================================

 

11. Batch Requests
------------------

[width="100%",cols="100%",]
|=======================================================================
a|
Req 37          To support the batch-processing extension a SensorThings
service SHALL follow the requirements as defined in Section 11.

extension/batchRequest

|=======================================================================

11.1        Introduction
~~~~~~~~~~~~~~~~~~~~~~~~

The SensorThings service interface provides interfaces for users to
perform CRUD actions on resources through different HTTP methods.
However, as many IoT devices are resource-constrained, handling a large
number of communications may not be practical. This section describes
how a SensorThings service can optionally support executing multiple
operations sent in a single HTTP request through the use of batch
processing. This section covers both how batch operations are
represented and processed. SensorThings batch request extension is
adapted from OData 4.0 Protocol 11.7 and all subsections with the
exception that the OData-Version header SHOULD be omitted. Readers are
encouraged to read the OData specification section 11.7 before reading
the examples below.

11.2        Batch-processing request
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A batch request is represented as a Multipart MIME v1.0 message
[RFC2046], a standard format allowing the representation of multiple
parts, each of which may have a different content type, within a single
request.

The example below shows a GUID as a boundary and example.org/v1.0/ for
the URI of the service.

Batch requests are submitted as a single HTTP POST request to the batch
endpoint of a service, located at the URL $batch relative to the service
root (e.g., example.org/v1.0/$batch).

Note: In the example, request bodies are excluded in favour of English
descriptions inside '<>' brackets to simplify the example.****

**Example 31-1:** a Batch Request header example**

[width="100%",cols="100%",]
|=======================================================================
a|
*POST /v1.0/$batch HTTP/1.1*

**Host: **example.org**

**Content-Type:**
multipart/mixed;boundary=batch_36522ad7-fc75-4b56-8c71-56071383e77b

 

<BATCH_REQUEST_BODY>

|=======================================================================

 

Note: The batch request boundary must be quoted if it contains any of
the following special characters:

[width="100%",cols="100%",]
|===========================
a|
( ) < > @ , ; :  / " [ ] ? =

|===========================

 

11.2.1   Batch request body example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following example shows a Batch Request that contains the following
operations in the order listed

1.     A query request

2.     Change Set that contains the following requests:

a.      Insert entity (with Content-ID = 1)

b.     Update request (with Content-ID = 2)

3.     A second query request

Note: For brevity, in the example, request bodies are excluded in favor
of English descriptions inside <> brackets.

Note also that the two empty lines after the Host header of the GET
request are necessary: the first is part of the GET request header; the
second is the empty body of the GET request, followed by a CRLF
according to [RFC2046].

[Adapted from OData 4.0 Protocol 11.7.2]

**Example 31-2:** a Batch Request body example**

[width="100%",cols="100%",]
|=======================================================================
a|
**POST** /v1.0/$batch HTTP/1.1

**Host:** host

Content-Type:
multipart/mixed;boundary=batch_36522ad7-fc75-4b56-8c71-56071383e77b

Content-Length: ###

 

--batch_36522ad7-fc75-4b56-8c71-56071383e77b

Content-Type: application/http

Content-Transfer-Encoding:binary

 

GET /v1.0/Things(1)

Host: host

 

 

--batch_36522ad7-fc75-4b56-8c71-56071383e77b

Content-Type:
multipart/mixed;boundary=changeset_77162fcd-b8da-41ac-a9f8-9357efbbd

 

--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd

Content-Type: application/http

Content-Transfer-Encoding: binary

Content-ID: 1

 

POST /v1.0/Things HTTP/1.1

Host: host 

Content-Type: application/json

Content-Length: ###

 

<JSON representation of a new Thing>

--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd

Content-Type: application/http

Content-Transfer-Encoding:binary

Content-ID: 2

 

PATCH /v1.0/Things(1) HTTP/1.1

Host: host

Content-Type: application/json

If-Match: xxxxx

Content-Length: ###

 

<JSON representation of Things(1)>

--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd--

--batch_36522ad7-fc75-4b56-8c71-56071383e77b

Content-Type: application/http

Content-Transfer-Encoding: binary

 

GET /v1.0/Things(3) HTTP/1.1

Host: host

 

 

--batch_36522ad7-fc75-4b56-8c71-56071383e77b--

|=======================================================================

11.2.2   Referencing new entities in a change set example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Example 31-3:** a Batch Request that contains the following operations
in the order listed:

A change set that contains the following requests:

?       Insert a new Datastream entity (with Content-ID = 1)

?       Insert a second new entity, a Sensor entity in this example
(reference request with Content-ID = 1)

 

[width="100%",cols="100%",]
|=======================================================================
a|
**POST** /v1.0/$batch HTTP/1.1

**Host:** host

Content-Type:
multipart/mixed;boundary=batch_36522ad7-fc75-4b56-8c71-56071383e77b

 

--batch_36522ad7-fc75-4b56-8c71-56071383e77b

Content-Type:
multipart/mixed;boundary=changeset_77162fcd-b8da-41ac-a9f8-9357efbbd

 

--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd

Content-Type: application/http

Content-Transfer-Encoding: binary

Content-ID: 1

 

POST /v1.0/Datastreams HTTP/1.1

Host: host 

Content-Type: application/json

Content-Length: ###

 

<JSON representation of a new Datastream>

--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd

Content-Type: application/http

Content-Transfer-Encoding: binary

Content-ID: 2

 

POST $1/Sensor HTTP/1.1

Host: host

Content-Type: application/json

Content-Length: ###

 

<JSON representation of a new Sensor>

--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd--

--batch_36522ad7-fc75-4b56-8c71-56071383e77b--

|=======================================================================

 

11.3        Batch-processing response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Example 31-4:** referencing the batch request example 31-2 above,
assume all the requests except the final query request succeed. In this
case the response would be:

[width="100%",cols="100%",]
|=======================================================================
a|
HTTP/1.1 200 Ok

Content-Length: ####

Content-Type: multipart/mixed;boundary=b_243234_25424_ef_892u748

 

--b_243234_25424_ef_892u748

Content-Type: application/http

Content-Transfer-Encoding: binary

 

HTTP/1.1 200 Ok

Content-Type: application/json

Content-Length: ###

 

<JSON representation of the Thing entity with id = 1>

--b_243234_25424_ef_892u748

Content-Type:
multipart/mixed;boundary=cs_12u7hdkin252452345eknd_383673037

 

--cs_12u7hdkin252452345eknd_383673037

Content-Type: application/http

Content-Transfer-Encoding: binary

Content-ID: 1

 

HTTP/1.1 201 Created

Content-Type: application/json

Location: http://host/v1.0/Things(99)

Content-Length: ###

 

<JSON representation of a new Thing entity>

 

--cs_12u7hdkin252452345eknd_383673037

Content-Type: application/http

Content-Transfer-Encoding: binary

Content-ID: 2

 

HTTP/1.1 204 No Content

Host: host

 

 

--cs_12u7hdkin252452345eknd_383673037--

--b_243234_25424_ef_892u748

Content-Type: application/http

Content-Transfer-Encoding: binary

 

HTTP/1.1 404 Not Found

Content-Type: application/json

Content-Length: ###

 

<Error message>

--b_243234_25424_ef_892u748--

|=======================================================================

**

 

11.4        Asynchronous batch requests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Example 31-5:** referencing the example 31-2 above again, assume that
when interrogating the monitor URL for the first tim only the first
request in the batch finished processing and all the remaining requests
except the final query request succeed. In this case the response would
be:

[width="100%",cols="100%",]
|===============================================================
a|
HTTP/1.1 200 Ok

Content-Length: ####

Content-Type: multipart/mixed;boundary=b_243234_25424_ef_892u748

 

--b_243234_25424_ef_892u748

Content-Type: application/http

Content-Transfer-Encoding: binary

 

HTTP/1.1 200 Ok

Content-Type: application/json

Content-Length: ###

 

<JSON representation of the Thing entity with id = 1>

--b_243234_25424_ef_892u748

Content-Type: application/http

Content-Transfer-Encoding: binary

 

HTTP/1.1 202 Accepted

Location: http://service-root/async-monitor

Retry-After: ###

 

 

--b_243234_25424_ef_892u748--

|===============================================================

 

Client makes a second request using the returned monitor URL:

[width="100%",cols="100%",]
|=======================================================================
a|
HTTP/1.1 200 Ok

Content-Length: ####

Content-Type: multipart/mixed;boundary=b_243234_25424_ef_892u748

 

--b_243234_25424_ef_892u748

Content-Type:
multipart/mixed;boundary=cs_12u7hdkin252452345eknd_383673037

 

--cs_12u7hdkin252452345eknd_383673037

Content-Type: application/http

Content-Transfer-Encoding: binary

Content-ID: 1

 

HTTP/1.1 201 Created

Content-Type: application/json

Location: http://host/v1.0/Things(99)

Content-Length: ###

 

<JSON representation of a new Thing entity>

--cs_12u7hdkin252452345eknd_383673037

Content-Type: application/http

Content-Transfer-Encoding: binary

Content-ID: 2

 

HTTP/1.1 204 No Content

Host: host

 

 

--cs_12u7hdkin252452345eknd_383673037--

--b_243234_25424_ef_892u748

Content-Type: application/http

Content-Transfer-Encoding: binary

 

HTTP/1.1 404 Not Found

Content-Type: application/json

Content-Length: ###

 

<Error message>

--b_243234_25424_ef_892u748?

|=======================================================================

12. SensorThings MultiDatastream extension
-------------------------------------------

Observation results may have many data types, including primitive types
like category or measure, but also more complex types such as time,
location and geometry [OGC and ISO 19156:2008]. SensorThings?
MultiDatastream entity is an extension to handle such complex
observations with complex results, especially when the result is an
array.

A MultiDatastream groups a collection of Observations and the
Observations in a MultiDatastream SHALL have a complex result type.

 

[width="100%",cols="100%",]
|=======================================================================
a|
Req 38          Each MultiDatastream entity SHALL have the mandatory
properties and MAY have the optional properties listed in Table _12_1.

entities/multiDatastreamProperties

a|
Req 39          Each MultiDatastream entity SHALL have the direct
relation between a Datastream entity and other entity types listed in
Table _12_2.

entities/multiDatastreamRelations

|=======================================================================

**

 

Table _12_1 Properties of a MultiDatastream entity

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**description**

 a|
The description of the Datastream entity.

 a|
CharacterStringlink:#_msocom_38[[JBr38]] 

 a|
One (mandatory)

a|
**unitOfMeaseurements **

 a|
A JSON array of JSON objects that containing three key-value pairs. The
name property presents the full name of the unitOfMeasurement; the
symbol property shows the textual form of the unit symbol; and the
definition contains the IRI defining the unitOfMeasurement. (see Req 40
for the constraints between unitOfMeasurement, multiObservationDataType
and result)

 

 a|
A JSON array

 a|
One (mandatory)

 

Note: It is possible an observation does not have a unit of measurement.
For example, a count observation does not have a unit of measurement.

a|
**observationType**

 a|
The type of Observation (with unique result type), which is used by the
service to encode observations.

 a|
ValueCode and its value SHALL be OM_ComplexObservation.

 a|
One (mandatory)

a|
*multiObservationDataTypes*

 a|
This property defines the observationType of each element of the result
of a complex Observation.

 a|
A JSON array of ValueCode. See Table _8_11 for the available ValueCodes.

 a|
One

(mandatory)

a|
**observedArea**

 a|
The spatial bounding box of the spatial extent of all FeatureOfInterests
that belong to the Observations associated with this MultiDatastream.

 a|
GM_Envelope (GeoJSON Polygon)

 a|
Zero-to-one

a|
**phenomenonTime**

 a|
The temporal bounding box of the phenomenon times of all observations
belonging to this MultiDatastream.

 a|
TM_Period (ISO 8601 Time Interval)

 a|
Zero-to-one

a|
**resultTime**

 a|
The temporal bounding box of the result times of all observations
belonging to this MultiDatastream.

 a|
TM_Period (ISO 8601 Time Interval)

 a|
Zero-to-one

|=======================================================================

**

 

Table _12_2 Direct relation between a MultiDatastream entity and other
entity types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**Thing**

 a|
Many optional to one mandatory

 a|
A Thing has zero-to-many MultiDatastream. A MultiDatastream entity SHALL
only link to a Thing as a collection of Observations.

a|
**Sensor**

 a|
Many optional to one mandatory

 a|
The Observations in a MultiDatastream are performed by one-and-only-one
Sensor. One Sensor MAY produce zero-to-many Observations in different
MultiDatastreams.

a|
**ObservedProperty**

 a|
Many optional to many mandatory

 a|
The Observations of a MultiDatastream SHALL observe the same
ObservedProperties entity set.

a|
**Observation**

 a|
One mandatory to many optional

 a|
A MultiDatastream has zero-to-many Observations. One Observation SHALL
occur in one-and-only-one MultiDatastream.

|=======================================================================

**

 

Table _12_3 Direct relation between an MultiDatastream?s Observation
entity and other entity types

[width="100%",cols="34%,33%,33%",]
|=======================================================================
a|
*Entity type*

 a|
*Relation*

 a|
**Description**

a|
**MultiDatastream**

 a|
Many optional to one mandatory

 a|
A MultiDatastream can have zero-to-many Observations. One Observation
SHALL occur in one-and-only-one MultiDatastream.

a|
**FeatureOfInterest**

 a|
Many optional to one mandatory

 a|
An Observation observes on one-and-only-one FeatureOfInterst. One
FeatureOfInterest could be observed by one-to-many Observations.

|=======================================================================

 

 

[width="100%",cols="100%",]
|=======================================================================
a|
Req 40          The size and the order of each element of a
MultiDatastream?s unitOfMeasurements array  (__i.e.__,
MultiDatastream(id)/unitOfMeasurements) SHALL match the size and the
order of each element of the related ObservedProperties collection
(__i.e.__, MultiDatastreams(id)/ObservedProperties).

The size and the order of each element of a MultiDatastream?s
unitOfMeasurements array (__i.e.__,
MultiDatastreams(id)/unitOfMeasurements) SHALL match the size and the
order of each element of all related Observations? result (__i.e.__,
MultiDatastreams(id)/Observations?$select=result).

The size and the order of each element of a MultiDatastream?s
unitOfMeasurements array (__i.e.__,
MultiDatastreams(id)/unitOfMeasurements) SHALL match the size and the
order of each element of the MultiDatastream?s multiObservationDataTypes
array (__i.e.__, MultiDatastreams(id)/multiObservationDataTypes).

When a complex result?s element does not have a unit of measurement
(e.g., a OM_TruthObservation type), the corresponding unitOfMeasurement
element SHALL have null values. +
 +

entities/multiDatastreamConstraints

|=======================================================================

 

**Example 32: MultiDatastream entity example 1**

[width="100%",cols="100%",]
|=======================================================================
a|
\{

  "id": 1,

  "selfLink": "http://example.org/v1.0/MultiDatastreams(1)",

  "Thing": \{

    "navigationLink": "MultiDatastreams(1)/Thing"

  },

  "Sensor": \{

    "navigationLink": "MultiDatastreams(1)/Sensor"

  },

  "ObservedProperty": \{

    "navigationLink": "MultiDatastreams(1)/ObservedProperties"

  },

  "Observations": \{

    "navigationLink": "MultiDatastreams/Observations"

  },

"description": "This is a MultiDatastream from a simple weather station
measuring air temperature, relative humidity and visibility",

"observationType":
"http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_ComplexObservation",

  "multiObservationDataTypes": [

   
"http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement",

   
"http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement",

   
"http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_CategoryObservation"

  ],

  "unitOfMeasurements": [

    \{

      "name": "degree Celsius",

      "symbol": " ?C",

      "definition": " http://unitsofmeasure.org/ucum.html#para-30"

    },

    \{

      "name": " percent ",

      "symbol": "%",

      "definition": " http://unitsofmeasure.org/ucum.html#para-29"

    },

    \{

      "name": "null",

      "symbol": "null",

      "definition": "null"

    }

  ],

  "observedArea": \{

    "type": "Polygon",

    "coordinates": [

      [

        [100,0],[101,0],[101,1],[100,1],[100,0]

      ]

    ]

  },

  "phenomenonTime": "2014-03-01T13:00:00Z/2015-05-11T15:30:00Z",

  "resultTime": "2014-03-01T13:00:00Z/2015-05-11T15:30:00Z"

}link:#_msocom_39[[JBr39]] 

|=======================================================================

 

**Example 33: an example ObservedProperties collection of the above
MultiDatastream: Please note that the order of the elements in the value
array match the order of the related Observations/result array as well
as the order of the related unitOfMeasurements array .**

[width="100%",cols="100%",]
|=======================================================================
a|
\{

  "value": [

    \{

      "id": 1,

      "selfLink": "http://example.org/v1.0/ObservedProperties(1)",

      "Datastreams": \{

        "navigationLink": "ObservedProperties(1)/Datastreams"

      },

      "MultiDatastreams": \{

        "navigationLink": "ObservedProperties(1)/ MultiDatastreams"

      },

"description": "The dew point is the temperature at which the water
vapor in a sample of air at constant barometric pressure condenses into
liquid water at the same rate at which it evaporates. At temperatures
below the dew point, water will leave the air.",

      "name": "Dew point temperature"

    },

    \{

      "id": 2,

      "selfLink": "http://example.org/v1.0/ObservedProperties(2)",

      "Datastreams": \{

        "navigationLink": "ObservedProperties(2)/Datastreams"

      },

      "MultiDatastreams": \{

        "navigationLink": "ObservedProperties(2)/ MultiDatastreams"

      },

"description": "Relative humidity (abbreviated RH) is the ratio of the
partial pressure of water vapor to the equilibrium vapor pressure of
water at the same temperature.",

      "name": "Relative Humidity"

    },

    \{

      "id": 3,

      "selfLink": "http://example.org/v1.0/ObservedProperties(3)",

      "Datastreams": \{

        "navigationLink": "ObservedProperties(3)/Datastreams"

      },

      "MultiDatastreams": \{

        "navigationLink": "ObservedProperties(3)/MultiDatastreams"

      }, +
       "description": "Visibility is a measure of the distance at which
an object or light can be clearly discerned. ",

      "name": "Visibility (Weather)"

    }

  ]

}link:#_msocom_40[[JBr40]] 

|=======================================================================

**

 

**Example 34: an example** **Observation of the above MultiDatastream:
Please note that the order of the elements in the result array match (1)
the order of the related ObservedProperties (__i.e.__,
Observation(id)/MultiDatastreams(id)/ObservedProperties), (2) the order
of the related unitOfMeasurements array (__i.e.__, Observation(id)/**
**MultiDatastream(id)/unitOfMeasurements) and (3) the order of the
related multiObservationDataTypes (__i.e.__,
Observation(id)/MultiDatastream(id)/multiObservationDataTypes).**

[width="100%",cols="100%",]
|========================================================
a|
\{

  "id": 1,

  "selfLink": "http://example.org/v1.0/Observations(1)",

  "FeatureOfInterest": \{

    "navigationLink": "Observations(1)/FeatureOfInterest"

  },

  "MultiDatastream": \{

    "navigationLink": "Observations(1)/MultiDatastream"

  },

  "phenomenonTime": "2014-12-31T11:59:59.00+08:00",

  "resultTime": "2014-12-31T11:59:59.00+08:00",

  "result": [

    25,

    65,

    "clear"

  ]

}link:#_msocom_41[[JBr41]] 

|========================================================

13. SensorThings Data Array Extension
-------------------------------------

[width="100%",cols="100%",]
|=======================================================================
a|
Req 41          To support the SensorThings data array extension, a
service SHALL support the retrieval and creation of observations as
defined in Section 13.

extension/dataArray

|=======================================================================

 

Similar to the SWE DataArray in the OGC SOS, SensorThings API also
provides the support of dataArray (in addition to formatting every
observation entity as a JSON object) to aggregate multiple Observation
entities and reduce the request (e.g., POST) and response (e.g., GET)
size. SensorThings mainly use dataArray in two scenarios: (1) get
Observation entities in dataArray, and (2) create Observation entities
with dataArray.

13.1        Retrieve a Datastream?s Observation entities in dataArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In SensorThings services, users are able to request for multiple
Observation entities and format the entities in the dataArray format.
When a SensorThings service returns a dataArray response, the service
groups Observation entities by Datastream or MultiDatastream, which
means the Observation entities that link to the same Datastream or the
same MultiDatastream are aggregated in one dataArray.

13.1.1   Request
^^^^^^^^^^^^^^^^

In order to request for dataArray, users must include the query option
"$resultFormat=dataArray" when requesting Observation entities. For
example, http://example.org/v1.0/Observations?$resultFormat=dataArray.

13.1.2   Response
^^^^^^^^^^^^^^^^^

The response Observations in dataArray format contains the following
properties.****

Table _13_1 Properties of getting Observation entities in DataArray

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
**Datastream or MultiDatastream**

 a|
The navigationLink of the Datastream or the MultiDatastream entity used
to group Observation entities in the dataArray.

 a|
navigationLink

 a|
One (mandatory)

a|
*dataArrayCount*

 a|
Number of Observation entities in the dataArray.

 a|
Integer

 a|
Zero-to-One

a|
*components*

 a|
An ordered array of Observation property names whose matched values are
included in the dataArray.

 a|
An ordered array of Observation property names

 a|
One (mandatory)

a|
*dataArray*

 a|
A JSON Array containing Observation entities. Each Observation entity is
represented by the ordered property values, which match with the ordered
property names in components.

 a|
JSON Array

 a|
One (mandatory)

|=======================================================================

 

*Example 35: an example of getting Observation entities from a
Datastream in dataArray result format:*

[width="100%",cols="100%",]
|===========================================================
a|
*GET /Datastreams(1)/Observations?$resultFormat=dataArray  +
 HTTP/1.1 200 OK*

**Host: **www.example.org/v1.0****

**Content-Type: **application/json

 

\{

  "value": [

    \{

      "Datastream": \{

        "navigationLink": "Datastreams(1)"

      },

      "dataArrayCount": 3,

      "components": [

        "id",

        "phenomenonTime",

        "resultTime",

        "result"

      ],

      "dataArray": [

        [

          1,

          "2005-08-05T12:21:13Z",

          "2005-08-05T12:21:13Z",

          20

        ],

        [

          2,

          "2005-08-05T12:22:08Z",

          "2005-08-05T12:21:13Z",

          30

        ],

        [

          3,

          "2005-08-05T12:22:54Z",

          "2005-08-05T12:21:13Z",

          0

        ]

      ]

    }

  ]

}

|===========================================================

 

*Example 36: an example of getting Observation entities from a
MultiDatastream in dataArray result format*

[width="100%",cols="100%",]
|=====================================================================
a|
*GET /V1.0/MultiDatastreams(1)/Observations?$resultFormat=dataArray  +
 HTTP/1.1 200 OK*

**Host: **www.example.org****

**Content-Type: **application/json

 

\{

  "value": [

    \{

      "MultiDatastream": \{

        "navigationLink": "MultiDatastreams(1)"

      },

      "dataArrayCount": 3,

      "components": [

        "id",

        "phenomenonTime",

        "resultTime",

        "result"

      ],

      "dataArray": [

        [

          1,

          "2010-12-23T11:20:00-0700",

          "2010-12-23T11:20:00-0700",

          [

            10.2,

            65,

            "clear"

          ]

        ],

        [

          2,

          "2010-12-23T11:22:08-0700",

          "2010-12-23T11:20:00-0700",

          [

            11.3,

            63,

            "clear"

          ]

        ],

        [

          3,

          "2010-12-23T11:22:54-0700",

          "2010-12-23T11:20:00-0700",

          [

            9.8,

            67,

            "clear"

          ]

        ]

      ]

    }

  ]

}

|=====================================================================

**

 

13.2        Create Observation entities with dataArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Besides creating Observation entities one by one with multiple HTTP POST
requests, there is a need to create multiple Observation entities with a
lighter message body in a single HTTP request. In this case, a sensing
system can buffer multiple Observations and send them to a SensorThings
service in one HTTP request. Here we propose an Action operation
CreateObservations.

13.2.1   Request
^^^^^^^^^^^^^^^^

Users can invoke the CreateObservations action by sending a HTTP POST
request to the SERVICE_ROOT_URL/CreateObservations.

For example, http://example.org/v1.0/CreateObservations.

The message body aggregates Observations by Datastreams, which means all
the Observations linked to one Datastream SHALL be aggregated in one
JSON object. The parameters of each JSON object are shown in the
following table.

As an Observation links to one FeatureOfInterest, to establish the link
between an Observation and a FeatureOfInterest, users should include the
FeatureOfInterest ids in the dataArray. If no FeatureOfInterest id
presented, the FeatureOfInterest will be created based on the Location
entities of the linked Thing entity by default.

**Table **_*13_2 Properties of creating Observation entities with
dataArray*

[width="100%",cols="25%,25%,25%,25%",]
|=======================================================================
a|
*Name*

 a|
*Definition*

 a|
*Data type*

 a|
**Multiplicity and use**

a|
*Datastream*

 a|
The unique identifier of the Datasteam linking to the group of
Observation entities in the dataArray.

 a|
The unique identifier of a Datastream

 a|
One (mandatory)

a|
*dataArrayCount*

 a|
Number of Observations in the dataArray.

 a|
Integer

 a|
Zero-to-One

a|
*components*

 a|
An ordered array of Observation property names whose matched values are
included in the dataArray. At least the phenomenonTime and result
properties SHALL be included. To establish the link between an
Observation and a FeatureOfInterest, the component name is
"FeatureOfInterest/id" and the FeatureOfInterest ids should be included
in the dataArray array. If no FeatureOfInterest id is presented, the
FeatureOfInterest will be created based on the Location entities of the
linked Thing entity by default.

 a|
An ordered array of Observation property names

 a|
One (mandatory)

a|
*dataArray*

 a|
A JSON Array containing Observations. Each Observation is represented by
the ordered property values. The ordered property values match with the
ordered property names in components.

 a|
JSON Array

 a|
One (mandatory)

|=======================================================================

 

 

*Example 37: example of a request for creating Observation entities in
dataArray*

[width="100%",cols="100%",]
|==================================
a|
*POST /CreateObservations HTTP/1.1*

**Host: **example.org/v1.0****

**Content-Type: **application/json

 

[

  \{

    "Datastream": \{

      "id": 1

    },

    "dataArrayCount": 2,

    "components": [

      "phenomenonTime",

      "result",

      "FeatureOfInterest/id"

    ],

    "dataArray": [

      [

        "2010-12-23T10:20:00-0700",

        20,

        1

      ],

      [

        "2010-12-23T10:21:00-0700",

        30,

        1

      ]

    ]

  },

  \{

    "Datastream": \{

      "id": 2

    },

    "dataArrayCount": 2,

    "components": [

      "phenomenonTime",

      "result",

      "FeatureOfInterest/id"

    ],

    "dataArray": [

      [

        "2010-12-23T10:20:00-0700",

        65,

        1

      ],

      [

        "2010-12-23T10:21:00-0700",

        60,

        1

      ]

    ]

  }

]

|==================================

 

13.2.2   Response
^^^^^^^^^^^^^^^^^

Upon successful completion the service SHALL respond with 201 Created.
The response message body SHALL contain the URLs of the created
Observation entities, where the order of URLs must match with the order
of Observations in the dataArray from the request. In the case of the
service having exceptions when creating individual observation entities,
instead of responding with URLs, the service must specify "error" in the
corresponding array element.****

*Example 38: an example of a response of creating Observation entities
with dataArray*

[width="100%",cols="100%",]
|============================================
a|
*POST /v1.0/CreateObservations HTTP/1.1  +
 201 Created*

**Host: **example.org****

**Content-Type: **application/json

 

[

  "http://examples.org/v1.0/Observations(1)",

  "error",

  "http://examples.org/v1.0/Observations(2)"

]

|============================================

14. SensorThings Sensing Profile MQTT Extension
-----------------------------------------------

In addition to support HTTP protocol, a SensorThings service MAY support
MQTT protocol to enhance the SensorThings service publish and subscribe
capabilities. This section describes the SensorThings MQTT extension.

14.1        Create a SensorThings entity with MQTT Publish
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[width="100%",cols="100%",]
|=======================================================================
a|
Req 42          To allow clients to create entities with MQTT Publish, a
service SHALL support the creation of entities with MQTT as defined in
Section 14.1.

extension/createSensingMQTT

|=======================================================================

 

To create an entity in a collection with MQTT, the client SHALL sends a
MQTT Publish request to the SensorThings service and the MQTT topic
SHALL be the collection's resource path. The MQTT application message
SHALL contain a single valid entity representation.

If the MQTT topic for the collection is a navigationalLink, the new
entity is automatically linked to the entity containing the
navigationalLink.

Similar to creating entities with HTTP POST, creating entities with MQTT
Publish SHALL also follow the integrity constraints listed in Table
_10_1. The two special cases defined in Req 30 are also applied in the
case of creating entities with MQTT Publish.

14.1.1   Link to existing entities when creating an entity
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To link to existing entities when creating an entity with MQTT, the
conditions in Req 31 SHALL be applied.

14.1.2   Create related entities when creating an entity (deep insert)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To create related entities when creating an entity with MQTT, the
condition in Req 32 SHALL also be applied.

14.2        Update a SensorThings entity with MQTT Publish
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[width="100%",cols="100%",]
|=======================================================================
a|
Req 43          To allow clients to update SensorThings entities with
MQTT Publish, a service SHALL support the updates of entities with MQTT
as defined in Section 14.2.

extension/updateSensingMQTT

|=======================================================================

 

To update a SensorThings entity with MQTT Publish, the client SHALL
sends a MQTT Publish request to the SensorThings service and the MQTT
topic SHALL be the resource path addressing to the single entity.

The properties provided in the payload (__i.e.__, MQTT application
message) corresponding to updatable properties SHALL replace the value
of the corresponding property in the entity. Missing properties of the
containing entity of complex property SHALL not be directly altered.

Key (__i.e.__, id) and other non-updatable properties (e.g.,
navigationLink) can be omitted from the request. If the request contains
a value for one of these properties, the service SHALL ignore that value
when applying the update. For example the service ignores entity id in
the payload when applying the update.

The entity SHALL NOT contain related entities as inline content. It MAY
contain binding information for navigation properties. For single-valued
navigation properties this replaces the relationship. For
collection-valued navigation properties this adds to the relation.

14.3        Receive updates with MQTT Subscribe
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[width="100%",cols="100%",]
|=======================================================================
a|
Req 44          To allow clients to receive notifications for the
updates of SensorThings entities with MQTT, a service SHALL support the
receiving updates with MQTT Subscribe as defined in Section 14.3.

extension/receiveUpdateMQTT

|=======================================================================

 

To receive notifications from a SensorThings service when some entities
updated, a client can send a MQTT Subscribe request to the SensorThings
service. SensorThings API defined the following four MQTT subscription
use cases.

14.3.1   Receive updates of a SensorThings entity set with MQTT
Subscribe
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

MQTT Control Packet: Subscribe

**Topic Pattern: **RESOURCE_PATH/COLLECTION_NAME**

**Example Topic: **Datastreams(1)/Observations

**Response: **When a new entity is added to the entity set (e.g., a new
Observation created), the service SHALL returns a complete JSON
representation of the newly created entity.

14.3.2     Receive updates of a SensorThings entity?s property with MQTT
Subscribe
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**MQTT Control Packet:** Subscribe

**Topic Pattern:** RESOURCE_PATH_TO_AN_ENTITY/PROPERTY_NAME

**Example Topic:** Datastreams(1)/observedArea****

**Response:** When the value of the property is changed (e.g., through a
PATCH request, a PUT request, or a MQTT update defined in 14.2), the
service SHALL returns a JSON object. The returned JSON object SHALL
follow section 9.3.4 - address to a property of an entity.**

*Example 39: an example response of receiving updates of an entity?s
property with MQTT Subscribe. - The example shows a sample response of
the following MQTT topic subscription ? Datastreams(1)/description*

[width="100%",cols="100%",]
|==========================================================
a|
\{

  "description": "This is a updated description of a thing"

}

|==========================================================

 

14.3.3   Receive updates of the selected properties of the newly created
entities or updated entities of a SensorThings entity set with MQTT
Subscribe
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**MQTT Control Packet:** Subscribe

**Topic Pattern:
**RESOURCE_PATH/COLLECTION_NAME?$select=PROPERTY_1,PROPERTY_2,?**

**Response: **When a new entity is added to an entity set or an existing
entity is updated (e.g., a new Observation created or an existing
Observation is updated), the service SHALL return a JSON representation
of the selected properties of the newly created or updated entity.

Note: In the case of an entity?s property is updated, it is possible
that the selected properties are not the updated property, so that the
returned JSON does not reflect the update.

*Example 40: an example response of receiving updates of the selected
property of an entity set with MQTT Subscribe. - The example shows a
sample response of the following MQTT topic subscription -
Datastreams(1)/Observations?$select=phenomenonTime,result*

[width="100%",cols="100%",]
|==========================================
a|
\{

  "result": 45,

  "phenonmenonTime": "2015-02-05T17:00:00Z"

}

|==========================================

 

 +
**

 

Annex Alink:#_msocom_42[[Carl Reed42]] 
---------------------------------------

**(normative)**

 **Abstract Test Suite**

NOTE: The smaller blue text in the following tables is the path fragment
that appended to the following URI:
http://www.opengis.net/spec/sensorthings/1.0/, and it provides the URI
that can be used to unambiguously identify the requirement and the
conformance class.

*A.1 Conformance class: minimum READ-only SensorThings API service*

**Conformance class id: **conf/readOnlySensorThings**

**A.1.1 Test: Common Properties**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/entities/commonProperties

a|
Test purpose

 a|
Check if each entity has the common properties as defined in this
specification.

a|
Test method

 a|
Inspect the full JSON object of the entity sets (__i.e.__, without
$select) to identify, if each entity has the common properties required
in requirement entities/commonProperties and the service sends
appropriate responses as defined in this specification.

|=======================================================================

**

 

**A.1.2 Test: Entity Properties**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/entities/thingProperties

?       req/entities/locationProperties

?       req/entities/historicalLocationProperties

?       req/entities/datastreamProperties

?       req/entities/sensorProperties

?       req/entities/observedPropertyProperties

?       req/entities/featureOfInterestProperties

a|
Test purpose

 a|
Check if each entity has the mandatory properties as defined in this
specification.

a|
Test method

 a|
Inspect the full JSON object of the different entity sets (__i.e.__,
without $select) to identify, if each entity has the mandatory
properties defined in the corresponding requirements.

|=======================================================================

**

 

**A.1.2 Test: Entity Relations**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/entities/thingRelations

?       req/entities/locationRelations

?       req/entities/historicalLocationRelations

?       req/entities/datastreamRelations

?       req/entities/sensorRelations

?       req/entities/observedRelations

?       req/entities/featureOfInterestRelations

 

a|
Test purpose

 a|
Check if each entity has the mandatory relations as defined in this
specification.

a|
Test method

 a|
Inspect the full JSON object of each SensorThings entity set (__i.e.__,
without using the $select query option) to identify, if each entity has
the mandatory relations defined in the corresponding requirements.

|=======================================================================

* ____*

**A.1.3 Test: Resource Path**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/service/resourcePath

a|
Test purpose

 a|
Check if the service supports all the resource path usages as defined in
this specification.

a|
Test method

 a|
Inspect the service to identify, if each resource path usage has been
implemented property.

|=======================================================================

* *

**A.1.4 Test: Request Data**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/sensingRead/entity

?       req/requestData/responseCode

 

a|
Test purpose

 a|
Check when a client request a resource, if the service responds with the
response codes as defined in this specification.

a|
Test method

 a|
Request a resource that exists to identify, if the response code is 200
OK.

Request a resource that doesn't exist to identify, if the response code
is 404 Not Found.

|=======================================================================

* *

*A.2 Conformance class: READ-only SensorThings API service that meets
the optional conformance requirements*

**Conformance class id: **conf/readOnlySensorThings/options

**Dependency:** conf/readOnlySensorThings****

**

 

**A.2.1 Test: Query Option Order**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/requestData/order

a|
Test purpose

 a|
Check if the results of the service requests are as if the system query
options were evaluated in the order as defined in this specification.

a|
Test method

 a|
Send a query includes the query options listed in requirement
requestData/order, and check if the results are evaluated according to
the order defined in this specification.

|=======================================================================

**

 

*A.2.2 Test: Request Data with $expand and $select*

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/requestData/expand

?       req/requestData/select

a|
Test purpose

 a|
Check if the service supports the $expand and $select option as defined
in this specification.

a|
Test method

 a|
Send requests with the $expand option following the different usages as
defined in this specification, check if the server returns appropriate
result as defined in this specification.

Send requests with the $select option following the different usages as
defined in this specification, check if the server returns appropriate
result as defined in this specification.

|=======================================================================

**

 

**A.2.3 Test: Query Option Response Code**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/queryOptions/responseCode

a|
Test purpose

 a|
Check when a client use a query option that doesn't support by the
service, if the service fails the request and responds with 501 Not
Implemented as defined in this specification.

a|
Test method

 a|
(If applicable) Send a query with a query option that is not supported
by the service, check if the server returns 501 Not Implemented as
defined in this specification.

|=======================================================================

**

 

**A.2.4 Test: Sorting Query Option**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/queryOptions/orderBy

a|
Test purpose

 a|
Check if the service supports the $orderby query option as defined in
this specification.

a|
Test method

 a|
Send a query with the $orderby query option, check if the server returns
appropriate result as defined in this specification.

|=======================================================================

**

 

**A.2.5 Test: Client-driven Pagination Query Option**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/queryOptions/top

?       req/queryOptions/skip

?       req/queryOptions/count

a|
Test purpose

 a|
Check if the service supports the $top, $skip and $count query option as
defined in this specification.

a|
Test method

 a|
Send a query with the $top query option, check if the server returns
appropriate result as defined in this specification.

Send a query with the $skip query option, check if the server returns
appropriate result as defined in this specification.

Send a query with the $count query option, check if the server returns
appropriate result as defined in this specification.

|=======================================================================

**

 

**A.2.6 Test: Filter Query Option **

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/queryOptions/filter

?       req/queryOptions/builtInFilterOperations

?       req/queryOptions/builtInFilterFunctions

a|
Test purpose

 a|
Check if the service supports the $filter query option and the built-in
filter operators as defined in this specification.

a|
Test method

 a|
Send a query with the $filter query option, check if the server returns
appropriate result as defined in this specification.

Send a query with the $filter query option for each built-in filter
operator, check if the server returns appropriate result as defined in
this specification.

Send a query with the $filter query option for each built-in filter
function, check if the server returns appropriate result as defined in
this specification.

|=======================================================================

**

 

**A.2.7 Test: Server-driven Pagination**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/queryOptions/pagination

a|
Test purpose

 a|
Check if the service supports the server-driven pagination as defined in
this specification.

a|
Test method

 a|
Send a query to list all entities of an entity set, check if the server
returns a subset of the requested entities as defined in this
specification.

|=======================================================================

**

 

*A.3 Conformance class: SensorThings API service that supports sensing
profile CRUD*

**Conformance class id: **conf/sensingCRUD

**Dependency:** conf/readOnlySensorThings****

**A.3.1 Test: Sensing Profile Entity Creation**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/sensingCreate/entity

?       req/sensingCreate/links

a|
Test purpose

 a|
Check if the service supports the creation of entities as defined in
this specification.

a|
Test method

 a|
For each SensorThings entity type creates an entity instance by creating
the related entities with a single request, check if the server responds
as defined in this specification.

For each SensorThings entity type creates an entity instance by linking
to existing entities with a single request, check if the server responds
as defined in this specification.

|=======================================================================

**

 

**A.3.2 Test: Sensing Profile Entity Update**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/sensingUpdate/entity

a|
Test purpose

 a|
Check if the service supports the update of entities as defined in this
specification.

a|
Test method

 a|
Update one or more properties of an entity instance, check if the server
responds as defined in this specification.

|=======================================================================

**

 

**A.3.3 Test: Sensing Profile Entity Deletion**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/sensingDelete/entity

a|
Test purpose

 a|
Check if the service supports the deletion of entities as defined in
this specification.

a|
Test method

 a|
Delete an entity instance, and check if the server responds as defined
in this specification.

|=======================================================================

**

 

*A.4 Conformance class: SensorThings API Batch Request Extension*

**Conformance class id: **conf/extension/batchRequest

**Dependency:** conf/readOnlySensorThings****

**A.4.1 Test: Batch Request Extension**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/extension/batchRequest

a|
Test purpose

 a|
Check if the service supports the batch request as defined in this
specification.

a|
Test method

 a|
Submit batch requests according to the examples listed in Section 11,
check if the server responds as defined in this specification.

|=======================================================================

**

 

*A.5 Conformance class: SensorThings API Sensing Profile MultiDatastream
Extension*

**Conformance class id: **conf/extension/multiDatastream

**Dependency:** conf/readOnlySensorThings****

**A.5.1 Test: Sensing Profile Multi Datastream Extension**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/entities/multiDatastreamProperties

?       req/entities/multiDatastreamRelations

?       req/entities/multiDatastreamConstraints

a|
Test purpose

 a|
Check if the service's MultiDatastream entity has the mandatory
properties and relations as defined in this specification.

a|
Test method

 a|
Inspect the full JSON object of a MultiDatastream entity (__i.e.__,
without $select) to identify, if each entity has the mandatory
properties and relations, and fulfill the constraints defined in the
corresponding requirements.

|=======================================================================

**

 

*A.6 Conformance class: SensorThings API Sensing Profile Data Array
Extension*

**Conformance class id: **conf/extension/dataArray

**Dependency:** conf/readOnlySensorThings****

**A.6.1 Test: Sensing Profile Data Array Extension**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/extension/dataArray

a|
Test purpose

 a|
Check if the service supports the data array extension as defined in
this specification.

a|
Test method

 a|
Issue a GET request for Datastreams (and MultiDatastreams if applicable)
that includes the query option "$resultFormat=dataArray", and then
inspect the returned JSON to identify if it fulfills the data array
format as defined in this specification.

Create at least two Datastreams by using the data array format as
defined in this specification. Inspect the response code and returned
JSON to identify if it fulfills the response as defined in this
specification.

|=======================================================================

**

 

*A.7 Conformance class: SensorThings API Sensing Profile MQTT Extension
for Create and Update*

**Conformance class id: **conf/extension/createUpdateMQTT

**Dependency:** conf/readOnlySensorThings and conf/sensingCRUD

**A.7.1 Test: Sensing Profile MQTT Extension for Create and Update**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?       req/extension/createSensingMQTT

?       req/extension/updateSensingMQTT

a|
Test purpose

 a|
Check if the service supports the creation and update of entities as
defined in this specification.

a|
Test method

 a|
For each SensorThings entity type creates an entity instance with MQTT
Publish, check if the server reacts as defined in this specification.

For each SensorThings entity type updates an entity instance with MQTT
Publish, check if the server reacts as defined in this specification.

|=======================================================================

**

 

*A.8 Conformance class: SensorThings API Sensing Profile MQTT Extension
for Receiving Updates*

**Conformance class id: **conf/extension/receiveUpdateMQTT

**Dependency:** conf/readOnlySensorThings

**

 

**A.8.1 Test: Sensing Profile MQTT Extension for Receiving Updates**

[width="100%",cols="50%,50%",]
|=======================================================================
a|
Requirements

 a|
?        req/extension/receiveUpdateMQTT

a|
Test purpose

 a|
Check if a client can receive notifications for the updates of
SensorThings entities with MQTT.

a|
Test method

 a|
Subscribe to an entity set with MQTT Subscribe. Then create a new entity
of the subscribed entity set either with POST or MQTT Publish. Check if
the client receives a complete JSON representation of the newly created
entity through MQTT.

Subscribe to an entity?s property with MQTT Subscribe. Then update the
property either with PATCH or MQTT Publish. Check if the client receive
a JSON object of the updated entity.

Subscribe to multiple properties of an entity with MQTT Subscribe. Then
update the properties either with PATCH or MQTT Publish. Check if the
client receives a JSON object of the updated properties.

|=======================================================================

**

 

 +
**

 

 

**Bibliography**

The GeoJSON Format Specification, January 15, 2015. Available Online:
https://datatracker.ietf.org/doc/draft-butler-geojson/

ITU-T Y.2060 Overview of the Internet of Things, 2012. Available Online:
https://www.itu.int/rec/T-REC-Y.2060-201206-I

OGC 12-000, OGC? SensorML: Model and XML Encoding Standard. Available
Online: http://www.opengeospatial.org/standards/sensorml

RFC 5023, The Atom Publishing Protocol. Available Online:
https://www.ietf.org/rfc/rfc5023.txt

 

 

 

 +

'''''

link:#_ftnref1[[1]]                The two terms of IoT and WoT are
frequently used interchangeably.

link:#_ftnref2[[2]]          In some cases, the Sensor in this data
model can also be seen as the Procedure (method, algorithm, or
instrument) defined in [OGC and ISO 19156:2011] .

'''''

 link:#_msoanchor_1[[JBr1]]All association link (role) shall be
lowerCamelCase like any attributes

 link:#_msoanchor_2[[Carl Reed2]]So you are considering both relative
and absolute locations? The IETF RFCs related to location consider both
? such as an address or a room and floor number.

 link:#_msoanchor_3[[JBr3]]Not shown in the UML diagram?

 link:#_msoanchor_4[[Alec Huan4]]Please see my previous comment.

 link:#_msoanchor_5[[TK5]]I am not sure, but I thought the
HistoricalLocation is just like Location but it is historical. So it can
be just like all other entities about name and get request response.

 link:#_msoanchor_6[[Alec Huan6]]So the time in the new
HistoricalLocation will be the service time when creating a new
Location?

[line-through]* link:#_msoanchor_7[[Carl Reed7]]Is there are suggested
normative reference for UoM types/codes? GML allows specifying a UoM
codespace and also references UCUM. I would also check what SensorML
does for UoM. The Architecture Board will be looking for
consistency/harmonization with the OGC/ISO baseline.*

 

SL: Updated to UCUM

 

 link:#_msoanchor_8[[Steve Lia8]]ISO 19103 and ISO 80000

 link:#_msoanchor_9[[Steve Lia9]]GeoJSON bbox is not a GeoJSON
object?.so it?s either we use the bbox object of GeoJSON or use a
GeoJSON polygon

 

e.g., "bbox": [-180.0, -90.0, 180.0, 90.0]

 

Or be consistent with OWS Common and CSW. Nice discussion here
http://gis.stackexchange.com/questions/124050/how-do-i-specify-the-lon-lat-ordering-in-csw-bounding-box-request[http://gis.stackexchange.com/questions/124050/how-do-i-specify-the-lon-lat-ordering-in-csw-bounding-box-request].
Basically, be true to the axis order etc as specified by the CRS. The
problem with GeoJSON is that the spec does not follow OGC or ISO usage
of CRS and associated axis order. I would instead use a JSON encoding
based existing OGC best practice.

 link:#_msoanchor_10[[JBr10]]Not shown in the UML diagram?

 link:#_msoanchor_11[[JBr11]]Modify the model accordingly

 link:#_msoanchor_12[[JBr12]]Modify the model accordingly

 link:#_msoanchor_13[[Steve Lia13]]what is the Valuecode for GeoJSON?

[line-through]* link:#_msoanchor_14[[Carl Reed14]]This is a requirement.
Should the standard req statement used above be used here?*

 

Steve: Req 16 stated that all the resource path in section 9.2 SHALL be
supported.

[line-through]* link:#_msoanchor_15[[Carl Reed15]]Not sure what section
this reference points to.*

[line-through]**

 

fixed

[line-through]* link:#_msoanchor_16[[Carl Reed16]]Not strictly a
requirement. This is an optional clause.*

[line-through]* link:#_msoanchor_17[[Carl Reed17]]Same comment as
above.*

[line-through]* link:#_msoanchor_18[[Carl Reed18]]Ditto*

[line-through]* link:#_msoanchor_19[[Carl Reed19]]Ditto*

 link:#_msoanchor_20[[Carl Reed20]]But this is a requirement.

 

Steve: $orderby is optional. But in order to conform to $orderby, asc
and desc are mandatory requirement.

[line-through]* link:#_msoanchor_21[[TK21]]*[line-through]*I think in
this case we also need to to expand Datastreams*

 

SL: corrected

[line-through]* link:#_msoanchor_22[[Carl Reed22]]See above WRT
requirements.*

[line-through]**

 

Steve: $skip is optional.

[line-through]* link:#_msoanchor_23[[Carl Reed23]]This is a separate
requirement. And not sure what section 7.4.3 refers to.*

[line-through]* link:#_msoanchor_24[[Carl Reed24]]See above. Also, I am
not sure what section 7.4.4 refers to.*

 

SL: Fixed.

[line-through]* link:#_msoanchor_25[[Carl Reed25]]Ditto above*

 link:#_msoanchor_26[[Steve Lia26]]

[line-through]*need to explain how this OData syntax works. seems also a
mystery in OData 4.0*

 

Found it.  It?s included in the OData ABNF. Geographyprefix.

[line-through]* link:#_msoanchor_27[[Alec Huan27]]previous design was to
use the WKT directly.*

 link:#_msoanchor_28[[Steve Lia28]]Example from Odata:
http://services.odata.org/V4/OData/OData.svc/Suppliers?$format=json&$filter=geo.distance(Location,geography%27%20Point(-122.03547668457%2047.6316604614258)%27)%20lt%20900

[line-through]* link:#_msoanchor_29[[TK29]]*[line-through]*In this case
I think we need to expand as well.*

[line-through]**

 

fixed

[line-through]* link:#_msoanchor_30[[Carl Reed30]]Ditto*

[line-through]* link:#_msoanchor_31[[Carl Reed31]]Ditto*

[line-through]* link:#_msoanchor_32[[Carl Reed32]]Not sure what section
this refers to. Same for all section references below.*

[line-through]**

 

fixed

 link:#_msoanchor_33[[Steve Lia33]]

Note: Upsert is not applicable here. [OData 4.0-Protocol-11.4.4]

 

That is because Upserts are not supported against entities whose keys
values are generated by the service. Services MUST fail an update
request to a URL that would identify such an entity and the entity does
not yet exist.

[line-through]* link:#_msoanchor_34[[Tania Kha34]]Do we need to remove
linked Things?*

[line-through]* link:#_msoanchor_35[[TK35]]*[line-through]*If we don't
have the Location then the HistoricalLocation connected to it also does
not exist somehow. But since the relationship between Location and
Historical Location is many-to-many I don't know what we should do in
this case.*

Steve:  link:#_msoanchor_36[[Office36]]When remove location, remove the
related historicalLocation entities.

 link:#_msoanchor_37[[TK37]]I think if we don't have the history
information nothing is changed.

 link:#_msoanchor_38[[JBr38]]CharacterString is in one word
(UpperCamelCase)

 link:#_msoanchor_39[[JBr39]]The mandatory attribute "observationType"
is missing

 link:#_msoanchor_40[[JBr40]]Please check where lowerCamelCase
navigation link name (role) applies. It has to be consistent with the
above

 link:#_msoanchor_41[[JBr41]]Please check where lowerCamelCase
navigation link name (role) applies. It has to be consistent with the
above

 

[line-through]* link:#_msoanchor_42[[Carl Reed42]]Annex A shall be the
ATS.*

 

Steve: fixed


